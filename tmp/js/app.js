!function t(e,i,r){function o(a,s){if(!i[a]){if(!e[a]){var h="function"==typeof require&&require;if(!s&&h)return h(a,!0);if(n)return n(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=i[a]={exports:{}};e[a][0].call(l.exports,function(t){var i=e[a][1][t];return o(i?i:t)},l,l.exports,t,e,i,r)}return i[a].exports}for(var n="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(t,e,i){(function(t){!function(t,r){"use strict";"function"==typeof define&&define.amd?define([],function(){return r()}):"object"==typeof i?e.exports=r():t.DeepDiff=r()}(this,function(e){"use strict";function i(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function r(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function o(t,e,i){o.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:i,enumerable:!0})}function n(t,e){n.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function a(t,e){a.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function s(t,e,i){s.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:i,enumerable:!0})}function h(t,e,i){var r=t.slice((i||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,r),t}function c(t){var e=typeof t;return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"undefined"!=typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function l(t,i,r,u,p,f,_){p=p||[];var d=p.slice(0);if("undefined"!=typeof f){if(u){if("function"==typeof u&&u(d,f))return;if("object"==typeof u){if(u.prefilter&&u.prefilter(d,f))return;if(u.normalize){var g=u.normalize(d,f,t,i);g&&(t=g[0],i=g[1])}}}d.push(f)}"regexp"===c(t)&&"regexp"===c(i)&&(t=t.toString(),i=i.toString());var v=typeof t,y=typeof i;if("undefined"===v)"undefined"!==y&&r(new n(d,i));else if("undefined"===y)r(new a(d,t));else if(c(t)!==c(i))r(new o(d,t,i));else if("[object Date]"===Object.prototype.toString.call(t)&&"[object Date]"===Object.prototype.toString.call(i)&&t-i!==0)r(new o(d,t,i));else if("object"===v&&null!==t&&null!==i){if(_=_||[],_.indexOf(t)<0){if(_.push(t),Array.isArray(t)){var m;t.length;for(m=0;m<t.length;m++)m>=i.length?r(new s(d,m,new a(e,t[m]))):l(t[m],i[m],r,u,d,m,_);for(;m<i.length;)r(new s(d,m,new n(e,i[m++])))}else{var b=Object.keys(t),w=Object.keys(i);b.forEach(function(o,n){var a=w.indexOf(o);a>=0?(l(t[o],i[o],r,u,d,o,_),w=h(w,a)):l(t[o],e,r,u,d,o,_)}),w.forEach(function(t){l(e,i[t],r,u,d,t,_)})}_.length=_.length-1}}else t!==i&&("number"===v&&isNaN(t)&&isNaN(i)||r(new o(d,t,i)))}function u(t,i,r,o){return o=o||[],l(t,i,function(t){t&&o.push(t)},r),o.length?o:e}function p(t,e,i){if(i.path&&i.path.length){var r,o=t[e],n=i.path.length-1;for(r=0;r<n;r++)o=o[i.path[r]];switch(i.kind){case"A":p(o[i.path[r]],i.index,i.item);break;case"D":delete o[i.path[r]];break;case"E":case"N":o[i.path[r]]=i.rhs}}else switch(i.kind){case"A":p(t[e],i.index,i.item);break;case"D":t=h(t,e);break;case"E":case"N":t[e]=i.rhs}return t}function f(t,e,i){if(t&&e&&i&&i.kind){for(var r=t,o=-1,n=i.path?i.path.length-1:0;++o<n;)"undefined"==typeof r[i.path[o]]&&(r[i.path[o]]="number"==typeof i.path[o]?[]:{}),r=r[i.path[o]];switch(i.kind){case"A":p(i.path?r[i.path[o]]:r,i.index,i.item);break;case"D":delete r[i.path[o]];break;case"E":case"N":r[i.path[o]]=i.rhs}}}function _(t,e,i){if(i.path&&i.path.length){var r,o=t[e],n=i.path.length-1;for(r=0;r<n;r++)o=o[i.path[r]];switch(i.kind){case"A":_(o[i.path[r]],i.index,i.item);break;case"D":o[i.path[r]]=i.lhs;break;case"E":o[i.path[r]]=i.lhs;break;case"N":delete o[i.path[r]]}}else switch(i.kind){case"A":_(t[e],i.index,i.item);break;case"D":t[e]=i.lhs;break;case"E":t[e]=i.lhs;break;case"N":t=h(t,e)}return t}function d(t,e,i){if(t&&e&&i&&i.kind){var r,o,n=t;for(o=i.path.length-1,r=0;r<o;r++)"undefined"==typeof n[i.path[r]]&&(n[i.path[r]]={}),n=n[i.path[r]];switch(i.kind){case"A":_(n[i.path[r]],i.index,i.item);break;case"D":n[i.path[r]]=i.lhs;break;case"E":n[i.path[r]]=i.lhs;break;case"N":delete n[i.path[r]]}}}function g(t,e,i){if(t&&e){var r=function(r){i&&!i(t,e,r)||f(t,e,r)};l(t,e,r)}}var v,y,m=[];return v="object"==typeof t&&t?t:"undefined"!=typeof window?window:{},y=v.DeepDiff,y&&m.push(function(){"undefined"!=typeof y&&v.DeepDiff===u&&(v.DeepDiff=y,y=e)}),i(o,r),i(n,r),i(a,r),i(s,r),Object.defineProperties(u,{diff:{value:u,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:g,enumerable:!0},applyChange:{value:f,enumerable:!0},revertChange:{value:d,enumerable:!0},isConflict:{value:function(){return"undefined"!=typeof y},enumerable:!0},noConflict:{value:function(){return m&&(m.forEach(function(t){t()}),m=null),u},enumerable:!0}}),u})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,i){var r=t("./_root"),o=r.Symbol;e.exports=o},{"./_root":9}],3:[function(t,e,i){function r(t){return null==t?void 0===t?h:s:c&&c in Object(t)?n(t):a(t)}var o=t("./_Symbol"),n=t("./_getRawTag"),a=t("./_objectToString"),s="[object Null]",h="[object Undefined]",c=o?o.toStringTag:void 0;e.exports=r},{"./_Symbol":2,"./_getRawTag":6,"./_objectToString":7}],4:[function(t,e,i){(function(t){var i="object"==typeof t&&t&&t.Object===Object&&t;e.exports=i}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],5:[function(t,e,i){var r=t("./_overArg"),o=r(Object.getPrototypeOf,Object);e.exports=o},{"./_overArg":8}],6:[function(t,e,i){function r(t){var e=a.call(t,h),i=t[h];try{t[h]=void 0;var r=!0}catch(o){}var n=s.call(t);return r&&(e?t[h]=i:delete t[h]),n}var o=t("./_Symbol"),n=Object.prototype,a=n.hasOwnProperty,s=n.toString,h=o?o.toStringTag:void 0;e.exports=r},{"./_Symbol":2}],7:[function(t,e,i){function r(t){return n.call(t)}var o=Object.prototype,n=o.toString;e.exports=r},{}],8:[function(t,e,i){function r(t,e){return function(i){return t(e(i))}}e.exports=r},{}],9:[function(t,e,i){var r=t("./_freeGlobal"),o="object"==typeof self&&self&&self.Object===Object&&self,n=r||o||Function("return this")();e.exports=n},{"./_freeGlobal":4}],10:[function(t,e,i){function r(t){return null!=t&&"object"==typeof t}e.exports=r},{}],11:[function(t,e,i){function r(t){if(!a(t)||o(t)!=s)return!1;var e=n(t);if(null===e)return!0;var i=u.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&l.call(i)==p}var o=t("./_baseGetTag"),n=t("./_getPrototype"),a=t("./isObjectLike"),s="[object Object]",h=Function.prototype,c=Object.prototype,l=h.toString,u=c.hasOwnProperty,p=l.call(Object);e.exports=r},{"./_baseGetTag":3,"./_getPrototype":5,"./isObjectLike":10}],12:[function(t,e,i){function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function n(t){if(u===setTimeout)return setTimeout(t,0);if((u===r||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function a(t){if(p===clearTimeout)return clearTimeout(t);if((p===o||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(t);try{return p(t)}catch(e){try{return p.call(null,t)}catch(e){return p.call(this,t)}}}function s(){g&&_&&(g=!1,_.length?d=_.concat(d):v=-1,d.length&&h())}function h(){if(!g){var t=n(s);g=!0;for(var e=d.length;e;){for(_=d,d=[];++v<e;)_&&_[v].run();v=-1,e=d.length}_=null,g=!1,a(t)}}function c(t,e){this.fun=t,this.array=e}function l(){}var u,p,f=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:r}catch(t){u=r}try{p="function"==typeof clearTimeout?clearTimeout:o}catch(t){p=o}}();var _,d=[],g=!1,v=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];d.push(new c(t,e)),1!==d.length||g||n(h)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=l,f.addListener=l,f.once=l,f.off=l,f.removeListener=l,f.removeAllListeners=l,f.emit=l,f.binding=function(t){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(t){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},{}],13:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(Array.isArray(t)){for(var e=0,i=Array(t.length);e<t.length;e++)i[e]=t[e];return i}return Array.from(t)}function n(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t}function a(t,e,i,r){switch("undefined"==typeof t?"undefined":n(t)){case"object":return"function"==typeof t[r]?t[r].apply(t,o(i)):t[r];case"function":return t(e);default:return t}}function s(t){var e=t.timestamp,i=t.duration;return function(t,r,o){var n=["action"];return e&&n.push("@ "+r),n.push(t.type),i&&n.push("(in "+o.toFixed(2)+" ms)"),n.join(" ")}}function h(t,e){var i=e.logger,r=e.actionTransformer,o=e.titleFormatter,n=void 0===o?s(e):o,h=e.collapsed,l=e.colors,p=e.level,f=e.diff;t.forEach(function(e,o){var s=e.started,_=e.startedTime,d=e.action,g=e.prevState,v=e.error,y=e.took,m=e.nextState,b=t[o+1];b&&(m=b.prevState,y=b.started-s);var w=r(d),M="function"==typeof h?h(function(){return m},d):h,S=(0,c.formatTime)(_),x=l.title?"color: "+l.title(w)+";":null,T=n(w,S,y);try{M?l.title?i.groupCollapsed("%c "+T,x):i.groupCollapsed(T):l.title?i.group("%c "+T,x):i.group(T)}catch(k){i.log(T)}var C=a(p,w,[g],"prevState"),D=a(p,w,[w],"action"),E=a(p,w,[v,g],"error"),R=a(p,w,[m],"nextState");C&&(l.prevState?i[C]("%c prev state","color: "+l.prevState(g)+"; font-weight: bold",g):i[C]("prev state",g)),D&&(l.action?i[D]("%c action","color: "+l.action(w)+"; font-weight: bold",w):i[D]("action",w)),v&&E&&(l.error?i[E]("%c error","color: "+l.error(v,g)+"; font-weight: bold",v):i[E]("error",v)),R&&(l.nextState?i[R]("%c next state","color: "+l.nextState(m)+"; font-weight: bold",m):i[R]("next state",m)),f&&(0,u["default"])(g,m,i,M);try{i.groupEnd()}catch(k){i.log("—— log end ——")}})}Object.defineProperty(i,"__esModule",{value:!0}),i.printBuffer=h;var c=t("./helpers"),l=t("./diff"),u=r(l)},{"./diff":15,"./helpers":16}],14:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i["default"]={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},e.exports=i["default"]},{}],15:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return"color: "+c[t].color+"; font-weight: bold"}function n(t){var e=t.kind,i=t.path,r=t.lhs,o=t.rhs,n=t.index,a=t.item;switch(e){case"E":return i.join(".")+" "+r+" → "+o;case"N":return i.join(".")+" "+o;case"D":return""+i.join(".");case"A":return[i.join(".")+"["+n+"]",a];default:return null}}function a(t,e,i,r){var a=(0,h["default"])(t,e);try{r?i.groupCollapsed("diff"):i.group("diff")}catch(s){i.log("diff")}a?a.forEach(function(t){var e=t.kind,r=n(t);i.log("%c "+c[e].text,o(e),r)}):i.log("—— no diff ——");try{i.groupEnd()}catch(s){i.log("—— diff end —— ")}}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=a;var s=t("deep-diff"),h=r(s),c={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}};e.exports=i["default"]},{"deep-diff":1}],16:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=i.repeat=function(t,e){return new Array(e+1).join(t)},o=i.pad=function(t,e){return r("0",e-t.toString().length)+t};i.formatTime=function(t){return o(t.getHours(),2)+":"+o(t.getMinutes(),2)+":"+o(t.getSeconds(),2)+"."+o(t.getMilliseconds(),3)},i.timer="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date},{}],17:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=n({},c["default"],t),i=e.logger,r=e.transformer,o=e.stateTransformer,h=e.errorTransformer,l=e.predicate,u=e.logErrors,p=e.diffPredicate;if("undefined"==typeof i)return function(){return function(t){return function(e){return t(e)}}};r&&console.error("Option 'transformer' is deprecated, use 'stateTransformer' instead!");var f=[];return function(t){var i=t.getState;return function(t){return function(r){if("function"==typeof l&&!l(i,r))return t(r);var c={};f.push(c),c.started=s.timer.now(),c.startedTime=new Date,c.prevState=o(i()),c.action=r;var _=void 0;if(u)try{_=t(r)}catch(d){c.error=h(d)}else _=t(r);c.took=s.timer.now()-c.started,c.nextState=o(i());var g=e.diff&&"function"==typeof p?p(i,r):e.diff;if((0,a.printBuffer)(f,n({},e,{diff:g})),f.length=0,c.error)throw c.error;return _}}}}var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};Object.defineProperty(i,"__esModule",{value:!0});var a=t("./core"),s=t("./helpers"),h=t("./defaults"),c=r(h);i["default"]=o,e.exports=i["default"]},{"./core":13,"./defaults":14,"./helpers":16}],18:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(i,r,o){var a=t(i,r,o),h=a.dispatch,c=[],l={getState:a.getState,dispatch:function(t){return h(t)}};return c=e.map(function(t){return t(l)}),h=s["default"].apply(void 0,c)(a.dispatch),n({},a,{dispatch:h})}}}i.__esModule=!0;var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};i["default"]=o;var a=t("./compose"),s=r(a)},{"./compose":21}],19:[function(t,e,i){"use strict";function r(t,e){return function(){return e(t.apply(void 0,arguments))}}function o(t,e){if("function"==typeof t)return r(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var i=Object.keys(t),o={},n=0;n<i.length;n++){var a=i[n],s=t[a];"function"==typeof s&&(o[a]=r(s,e))}return o}i.__esModule=!0,i["default"]=o},{}],20:[function(t,e,i){(function(e){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){var i=e&&e.type,r=i&&'"'+i.toString()+'"'||"an action";return"Given action "+r+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state.'}function n(t,e,i,r){var o=Object.keys(e),n=i&&i.type===h.ActionTypes.INIT?"preloadedState argument passed to createStore":"previous state received by the reducer";if(0===o.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";if(!(0,l["default"])(t))return"The "+n+' has unexpected type of "'+{}.toString.call(t).match(/\s([a-z|A-Z]+)/)[1]+'". Expected argument to be an object with the following '+('keys: "'+o.join('", "')+'"');var a=Object.keys(t).filter(function(t){return!e.hasOwnProperty(t)&&!r[t]});return a.forEach(function(t){r[t]=!0}),a.length>0?"Unexpected "+(a.length>1?"keys":"key")+" "+('"'+a.join('", "')+'" found in '+n+". ")+"Expected to find one of the known reducer keys instead: "+('"'+o.join('", "')+'". Unexpected keys will be ignored.'):void 0}function a(t){Object.keys(t).forEach(function(e){var i=t[e],r=i(void 0,{type:h.ActionTypes.INIT});if("undefined"==typeof r)throw new Error('Reducer "'+e+'" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');var o="@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".");if("undefined"==typeof i(void 0,{type:o}))throw new Error('Reducer "'+e+'" returned undefined when probed with a random type. '+("Don't try to handle "+h.ActionTypes.INIT+' or other actions in "redux/*" ')+"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.")})}function s(t){for(var i=Object.keys(t),r={},s=0;s<i.length;s++){var h=i[s];"production"!==e.env.NODE_ENV&&"undefined"==typeof t[h]&&(0,p["default"])('No reducer provided for key "'+h+'"'),"function"==typeof t[h]&&(r[h]=t[h])}var c=Object.keys(r);if("production"!==e.env.NODE_ENV)var l={};var u;try{a(r)}catch(f){u=f}return function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],i=arguments[1];if(u)throw u;if("production"!==e.env.NODE_ENV){var a=n(t,r,i,l);a&&(0,p["default"])(a)}for(var s=!1,h={},f=0;f<c.length;f++){var _=c[f],d=r[_],g=t[_],v=d(g,i);if("undefined"==typeof v){var y=o(_,i);throw new Error(y)}h[_]=v,s=s||v!==g}return s?h:t}}i.__esModule=!0,i["default"]=s;var h=t("./createStore"),c=t("lodash/isPlainObject"),l=r(c),u=t("./utils/warning"),p=r(u)}).call(this,t("_process"))},{"./createStore":22,"./utils/warning":24,_process:12,"lodash/isPlainObject":11}],21:[function(t,e,i){"use strict";function r(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];if(0===e.length)return function(t){return t};if(1===e.length)return e[0];var r=e[e.length-1],o=e.slice(0,-1);return function(){return o.reduceRight(function(t,e){return e(t)},r.apply(void 0,arguments))}}i.__esModule=!0,i["default"]=r},{}],22:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e,i){function r(){v===g&&(v=g.slice())}function n(){return d}function s(t){if("function"!=typeof t)throw new Error("Expected listener to be a function.");var e=!0;return r(),v.push(t),function(){if(e){e=!1,r();var i=v.indexOf(t);v.splice(i,1)}}}function l(t){if(!(0,a["default"])(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if("undefined"==typeof t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(y)throw new Error("Reducers may not dispatch actions.");try{y=!0,d=_(d,t)}finally{y=!1}for(var e=g=v,i=0;i<e.length;i++)e[i]();return t}function u(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");_=t,l({type:c.INIT})}function p(){var t,e=s;return t={subscribe:function(t){function i(){t.next&&t.next(n())}if("object"!=typeof t)throw new TypeError("Expected the observer to be an object.");i();var r=e(i);return{unsubscribe:r}}},t[h["default"]]=function(){return this},t}var f;if("function"==typeof e&&"undefined"==typeof i&&(i=e,e=void 0),"undefined"!=typeof i){if("function"!=typeof i)throw new Error("Expected the enhancer to be a function.");return i(o)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var _=t,d=e,g=[],v=g,y=!1;return l({type:c.INIT}),f={dispatch:l,subscribe:s,getState:n,replaceReducer:u},f[h["default"]]=p,f}i.__esModule=!0,i.ActionTypes=void 0,i["default"]=o;var n=t("lodash/isPlainObject"),a=r(n),s=t("symbol-observable"),h=r(s),c=i.ActionTypes={INIT:"@@redux/INIT"}},{"lodash/isPlainObject":11,"symbol-observable":26}],23:[function(t,e,i){(function(e){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(){}i.__esModule=!0,i.compose=i.applyMiddleware=i.bindActionCreators=i.combineReducers=i.createStore=void 0;var n=t("./createStore"),a=r(n),s=t("./combineReducers"),h=r(s),c=t("./bindActionCreators"),l=r(c),u=t("./applyMiddleware"),p=r(u),f=t("./compose"),_=r(f),d=t("./utils/warning"),g=r(d);"production"!==e.env.NODE_ENV&&"string"==typeof o.name&&"isCrushed"!==o.name&&(0,g["default"])("You are currently using minified code outside of NODE_ENV === 'production'. This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) to ensure you have the correct code for your production build."),i.createStore=a["default"],i.combineReducers=h["default"],i.bindActionCreators=l["default"],i.applyMiddleware=p["default"],i.compose=_["default"]}).call(this,t("_process"))},{"./applyMiddleware":18,"./bindActionCreators":19,"./combineReducers":20,"./compose":21,"./createStore":22,"./utils/warning":24,_process:12}],24:[function(t,e,i){"use strict";function r(t){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(t);try{throw new Error(t)}catch(e){}}i.__esModule=!0,i["default"]=r},{}],25:[function(t,e,i){(function(t,e){e.requestAnimationFrame=function(t){return setTimeout(t,1e3/60)},e.document={body:{appendChild:function(t){},scrollLeft:0,scrollTop:0},createElement:function(e){var i;return i={getBoundingClientRect:function(){var t;return t={left:0,top:0}},getContext:function(e){var r;return r={_termcolor:null,beginPath:function(){},canvas:i,clearRect:function(e,i,r,o){if(null!==this._termcolor){var n=this._termcolor.clearToAnsi(this.fillStyle);t.stdout.write(n)}},drawImage:function(t,e,i,r,o,n,a,s,h){},fill:function(){},fillRect:function(e,i,r,o){if(null!==this._termcolor){var n=this._termcolor.clearToAnsi(this.fillStyle);t.stdout.write(n)}},fillStyle:"#000",fillText:function(t,e,i){},font:"monospace",lineTo:function(t,e){},measureText:function(t){var e;return e={width:12}},moveTo:function(t,e){},textAlign:"center",textBaseline:"middle"}},height:0,style:{left:"100px",position:"absolute",top:"100px",visibility:"hidden"},width:0}},documentElement:{scrollLeft:0,scrollTop:0}};var r={isSupported:function(){return!(!document.createElement("canvas").getContext||!Function.prototype.bind)},DEFAULT_WIDTH:80,DEFAULT_HEIGHT:25,DIRS:{4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95};r.Text={RE_COLORS:/%([bc]){([^}]*)}/g,TYPE_TEXT:0,TYPE_NEWLINE:1,TYPE_FG:2,TYPE_BG:3,measure:function(t,e){for(var i={width:0,height:1},r=this.tokenize(t,e),o=0,n=0;n<r.length;n++){var a=r[n];switch(a.type){case this.TYPE_TEXT:o+=a.value.length;break;case this.TYPE_NEWLINE:i.height++,i.width=Math.max(i.width,o),o=0}}return i.width=Math.max(i.width,o),i},tokenize:function(t,e){var i=[],o=0;t.replace(this.RE_COLORS,function(e,n,a,s){var h=t.substring(o,s);return h.length&&i.push({type:r.Text.TYPE_TEXT,value:h}),i.push({type:"c"==n?r.Text.TYPE_FG:r.Text.TYPE_BG,value:a.trim()}),o=s+e.length,""});var n=t.substring(o);return n.length&&i.push({type:r.Text.TYPE_TEXT,value:n}),this._breakLines(i,e)},_breakLines:function(t,e){e||(e=1/0);for(var i=0,o=0,n=-1;i<t.length;){var a=t[i];if(a.type==r.Text.TYPE_NEWLINE&&(o=0,n=-1),a.type==r.Text.TYPE_TEXT){for(;0==o&&" "==a.value.charAt(0);)a.value=a.value.substring(1);var s=a.value.indexOf("\n");if(s!=-1){a.value=this._breakInsideToken(t,i,s,!0);for(var h=a.value.split("");h.length&&" "==h[h.length-1];)h.pop();a.value=h.join("")}if(a.value.length){if(o+a.value.length>e){for(var s=-1;;){var c=a.value.indexOf(" ",s+1);if(c==-1)break;if(o+c>e)break;s=c}if(s!=-1)a.value=this._breakInsideToken(t,i,s,!0);else if(n!=-1){var a=t[n],l=a.value.lastIndexOf(" ");a.value=this._breakInsideToken(t,n,l,!0),i=n}else a.value=this._breakInsideToken(t,i,e-o,!1)}else o+=a.value.length,a.value.indexOf(" ")!=-1&&(n=i);i++}else t.splice(i,1)}else i++}t.push({type:r.Text.TYPE_NEWLINE});for(var u=null,i=0;i<t.length;i++){var a=t[i];switch(a.type){case r.Text.TYPE_TEXT:u=a;break;case r.Text.TYPE_NEWLINE:if(u){for(var h=u.value.split("");h.length&&" "==h[h.length-1];)h.pop();u.value=h.join("")}u=null}}return t.pop(),t},_breakInsideToken:function(t,e,i,o){var n={type:r.Text.TYPE_NEWLINE},a={type:r.Text.TYPE_TEXT,value:t[e].value.substring(i+(o?1:0))};return t.splice(e+1,0,n,a),t[e].value.substring(0,i)}},Array.prototype.random=Array.prototype.random||function(){return this.length?this[Math.floor(r.RNG.getUniform()*this.length)]:null},Array.prototype.randomize=Array.prototype.randomize||function(){for(var t=[];this.length;){var e=this.indexOf(this.random());t.push(this.splice(e,1)[0])}return t},Number.prototype.mod=Number.prototype.mod||function(t){return(this%t+t)%t},String.prototype.capitalize=String.prototype.capitalize||function(){return this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.lpad=String.prototype.lpad||function(t,e){for(var i=t||"0",r=e||2,o="";o.length<r-this.length;)o+=i;return o=o.substring(0,r-this.length),o+this},String.prototype.rpad=String.prototype.rpad||function(t,e){for(var i=t||"0",r=e||2,o="";o.length<r-this.length;)o+=i;return o=o.substring(0,r-this.length),this+o},String.format=String.format||function(t){var e=String.format.map,i=Array.prototype.slice.call(arguments,1),r=function(r,o,n,a){if("%"==t.charAt(a-1))return r.substring(1);if(!i.length)return r;var s=i[0],h=o||n,c=h.split(","),l=c.shift(),u=e[l.toLowerCase()];if(!u)return r;var s=i.shift(),p=s[u].apply(s,c),f=l.charAt(0);return f!=f.toLowerCase()&&(p=p.capitalize()),p};return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,r)},String.format.map=String.format.map||{s:"toString"},String.prototype.format=String.prototype.format||function(){var t=Array.prototype.slice.call(arguments);return t.unshift(this),String.format.apply(String,t)},Object.create||(Object.create=function(t){var e=function(){};return e.prototype=t,new e}),Function.prototype.extend=Function.prototype.extend||function(t){return this.prototype=Object.create(t.prototype),this.prototype.constructor=this,this},"undefined"!=typeof window&&(window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},window.cancelAnimationFrame=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return clearTimeout(t)}),r.Display=function(t){var e=document.createElement("canvas");this._context=e.getContext("2d"),this._data={},this._dirty=!1,this._options={},this._backend=null;var i={width:r.DEFAULT_WIDTH,height:r.DEFAULT_HEIGHT,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1,termColor:"xterm"};for(var o in t)i[o]=t[o];this.setOptions(i),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),requestAnimationFrame(this._tick)},r.Display.prototype.DEBUG=function(t,e,i){var r=[this._options.bg,this._options.fg];this.draw(t,e,null,null,r[i%r.length])},r.Display.prototype.clear=function(){this._data={},this._dirty=!0},r.Display.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e];if(t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){t.layout&&(this._backend=new(r.Display[t.layout.capitalize()])(this._context));var i=(this._options.fontStyle?this._options.fontStyle+" ":"")+this._options.fontSize+"px "+this._options.fontFamily;this._context.font=i,this._backend.compute(this._options),this._context.font=i,this._context.textAlign="center",this._context.textBaseline="middle",this._dirty=!0}return this},r.Display.prototype.getOptions=function(){return this._options},r.Display.prototype.getContainer=function(){return this._context.canvas},r.Display.prototype.computeSize=function(t,e){return this._backend.computeSize(t,e,this._options)},r.Display.prototype.computeFontSize=function(t,e){return this._backend.computeFontSize(t,e,this._options)},r.Display.prototype.eventToPosition=function(t){if(t.touches)var e=t.touches[0].clientX,i=t.touches[0].clientY;else var e=t.clientX,i=t.clientY;var r=this._context.canvas.getBoundingClientRect();return e-=r.left,i-=r.top,e<0||i<0||e>=this._context.canvas.width||i>=this._context.canvas.height?[-1,-1]:this._backend.eventToPosition(e,i)},r.Display.prototype.draw=function(t,e,i,r,o){r||(r=this._options.fg),o||(o=this._options.bg),this._data[t+","+e]=[t,e,i,r,o],this._dirty!==!0&&(this._dirty||(this._dirty={}),this._dirty[t+","+e]=!0)},r.Display.prototype.drawText=function(t,e,i,o){var n=null,a=null,s=t,h=e,c=1;o||(o=this._options.width-t);for(var l=r.Text.tokenize(i,o);l.length;){var u=l.shift();switch(u.type){case r.Text.TYPE_TEXT:for(var p=!1,f=!1,_=!1,d=!1,g=0;g<u.value.length;g++){var v=u.value.charCodeAt(g),y=u.value.charAt(g);_=v>255&&v<65377||v>65500&&v<65512&&v>65518,p=32==y.charCodeAt(0)||12288==y.charCodeAt(0),!d||_||p||s++,_&&!f&&s++,this.draw(s++,h,y,n,a),f=p,d=_}break;case r.Text.TYPE_FG:n=u.value||null;break;case r.Text.TYPE_BG:a=u.value||null;break;case r.Text.TYPE_NEWLINE:s=t,h++,c++}}return c},r.Display.prototype._tick=function(){if(requestAnimationFrame(this._tick),this._dirty){if(this._dirty===!0){this._context.fillStyle=this._options.bg,this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height);for(var t in this._data)this._draw(t,!1)}else for(var e in this._dirty)this._draw(e,!0);this._dirty=!1}},r.Display.prototype._draw=function(t,e){var i=this._data[t];i[4]!=this._options.bg&&(e=!0),this._backend.draw(i,e)},r.Display.Backend=function(t){
this._context=t},r.Display.Backend.prototype.compute=function(t){},r.Display.Backend.prototype.draw=function(t,e){},r.Display.Backend.prototype.computeSize=function(t,e){},r.Display.Backend.prototype.computeFontSize=function(t,e){},r.Display.Backend.prototype.eventToPosition=function(t,e){},r.Display.Rect=function(t){r.Display.Backend.call(this,t),this._spacingX=0,this._spacingY=0,this._canvasCache={},this._options={}},r.Display.Rect.extend(r.Display.Backend),r.Display.Rect.cache=!1,r.Display.Rect.prototype.compute=function(t){this._canvasCache={},this._options=t;var e=Math.ceil(this._context.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),this._options.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._context.canvas.width=t.width*this._spacingX,this._context.canvas.height=t.height*this._spacingY},r.Display.Rect.prototype.draw=function(t,e){this.constructor.cache?this._drawWithCache(t,e):this._drawNoCache(t,e)},r.Display.Rect.prototype._drawWithCache=function(t,e){var i=t[0],r=t[1],o=t[2],n=t[3],a=t[4],s=""+o+n+a;if(s in this._canvasCache)var h=this._canvasCache[s];else{var c=this._options.border,h=document.createElement("canvas"),l=h.getContext("2d");if(h.width=this._spacingX,h.height=this._spacingY,l.fillStyle=a,l.fillRect(c,c,h.width-c,h.height-c),o){l.fillStyle=n,l.font=this._context.font,l.textAlign="center",l.textBaseline="middle";for(var u=[].concat(o),p=0;p<u.length;p++)l.fillText(u[p],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[s]=h}this._context.drawImage(h,i*this._spacingX,r*this._spacingY)},r.Display.Rect.prototype._drawNoCache=function(t,e){var i=t[0],r=t[1],o=t[2],n=t[3],a=t[4];if(e){var s=this._options.border;this._context.fillStyle=a,this._context.fillRect(i*this._spacingX+s,r*this._spacingY+s,this._spacingX-s,this._spacingY-s)}if(o){this._context.fillStyle=n;for(var h=[].concat(o),c=0;c<h.length;c++)this._context.fillText(h[c],(i+.5)*this._spacingX,Math.ceil((r+.5)*this._spacingY))}},r.Display.Rect.prototype.computeSize=function(t,e){var i=Math.floor(t/this._spacingX),r=Math.floor(e/this._spacingY);return[i,r]},r.Display.Rect.prototype.computeFontSize=function(t,e){var i=Math.floor(t/this._options.width),r=Math.floor(e/this._options.height),o=this._context.font;this._context.font="100px "+this._options.fontFamily;var n=Math.ceil(this._context.measureText("W").width);this._context.font=o;var a=n/100,s=a*r/i;return s>1&&(r=Math.floor(r/s)),Math.floor(r/this._options.spacing)},r.Display.Rect.prototype.eventToPosition=function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]},r.Display.Hex=function(t){r.Display.Backend.call(this,t),this._spacingX=0,this._spacingY=0,this._hexSize=0,this._options={}},r.Display.Hex.extend(r.Display.Backend),r.Display.Hex.prototype.compute=function(t){this._options=t;var e=Math.ceil(this._context.measureText("W").width);if(this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose)var i="height",r="width";else var i="width",r="height";this._context.canvas[i]=Math.ceil((t.width+1)*this._spacingX),this._context.canvas[r]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)},r.Display.Hex.prototype.draw=function(t,e){var i=t[0],r=t[1],o=t[2],n=t[3],a=t[4],s=[(i+1)*this._spacingX,r*this._spacingY+this._hexSize];if(this._options.transpose&&s.reverse(),e&&(this._context.fillStyle=a,this._fill(s[0],s[1])),o){this._context.fillStyle=n;for(var h=[].concat(o),c=0;c<h.length;c++)this._context.fillText(h[c],s[0],Math.ceil(s[1]))}},r.Display.Hex.prototype.computeSize=function(t,e){this._options.transpose&&(t+=e,e=t-e,t-=e);var i=Math.floor(t/this._spacingX)-1,r=Math.floor((e-2*this._hexSize)/this._spacingY+1);return[i,r]},r.Display.Hex.prototype.computeFontSize=function(t,e){this._options.transpose&&(t+=e,e=t-e,t-=e);var i=2*t/((this._options.width+1)*Math.sqrt(3))-1,r=e/(2+1.5*(this._options.height-1)),o=Math.min(i,r),n=this._context.font;this._context.font="100px "+this._options.fontFamily;var a=Math.ceil(this._context.measureText("W").width);this._context.font=n;var s=a/100;o=Math.floor(o)+1;var h=2*o/(this._options.spacing*(1+s/Math.sqrt(3)));return Math.ceil(h)-1},r.Display.Hex.prototype.eventToPosition=function(t,e){if(this._options.transpose){t+=e,e=t-e,t-=e;var i="width"}else var i="height";var r=this._context.canvas[i]/this._options[i];return e=Math.floor(e/r),e.mod(2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]},r.Display.Hex.prototype._fill=function(t,e){var i=this._hexSize,r=this._options.border;this._context.beginPath(),this._options.transpose?(this._context.moveTo(t-i+r,e),this._context.lineTo(t-i/2+r,e+this._spacingX-r),this._context.lineTo(t+i/2-r,e+this._spacingX-r),this._context.lineTo(t+i-r,e),this._context.lineTo(t+i/2-r,e-this._spacingX+r),this._context.lineTo(t-i/2+r,e-this._spacingX+r),this._context.lineTo(t-i+r,e)):(this._context.moveTo(t,e-i+r),this._context.lineTo(t+this._spacingX-r,e-i/2+r),this._context.lineTo(t+this._spacingX-r,e+i/2-r),this._context.lineTo(t,e+i-r),this._context.lineTo(t-this._spacingX+r,e+i/2-r),this._context.lineTo(t-this._spacingX+r,e-i/2+r),this._context.lineTo(t,e-i+r)),this._context.fill()},r.Display.Tile=function(t){r.Display.Rect.call(this,t),this._options={},this._colorCanvas=document.createElement("canvas")},r.Display.Tile.extend(r.Display.Rect),r.Display.Tile.prototype.compute=function(t){this._options=t,this._context.canvas.width=t.width*t.tileWidth,this._context.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight},r.Display.Tile.prototype.draw=function(t,e){var i=t[0],r=t[1],o=t[2],n=t[3],a=t[4],s=this._options.tileWidth,h=this._options.tileHeight;if(e&&(this._options.tileColorize?this._context.clearRect(i*s,r*h,s,h):(this._context.fillStyle=a,this._context.fillRect(i*s,r*h,s,h))),o)for(var c=[].concat(o),l=0;l<c.length;l++){var u=this._options.tileMap[c[l]];if(!u)throw new Error("Char '"+c[l]+"' not found in tileMap");if(this._options.tileColorize){var p=this._colorCanvas,f=p.getContext("2d");f.clearRect(0,0,s,h),f.drawImage(this._options.tileSet,u[0],u[1],s,h,0,0,s,h),"transparent"!=n&&(f.fillStyle=n,f.globalCompositeOperation="source-atop",f.fillRect(0,0,s,h)),"transparent"!=a&&(f.fillStyle=a,f.globalCompositeOperation="destination-over",f.fillRect(0,0,s,h)),this._context.drawImage(p,i*s,r*h,s,h)}else this._context.drawImage(this._options.tileSet,u[0],u[1],s,h,i*s,r*h,s,h)}},r.Display.Tile.prototype.computeSize=function(t,e){var i=Math.floor(t/this._options.tileWidth),r=Math.floor(e/this._options.tileHeight);return[i,r]},r.Display.Tile.prototype.computeFontSize=function(t,e){var i=Math.floor(t/this._options.width),r=Math.floor(e/this._options.height);return[i,r]},r.Display.Tile.prototype.eventToPosition=function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]},r.RNG={getSeed:function(){return this._seed},setSeed:function(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*this._frac,t=69069*t+1>>>0,this._s1=t*this._frac,t=69069*t+1>>>0,this._s2=t*this._frac,this._c=1,this},getUniform:function(){var t=2091639*this._s0+this._c*this._frac;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2},getUniformInt:function(t,e){var i=Math.max(t,e),r=Math.min(t,e);return Math.floor(this.getUniform()*(i-r+1))+r},getNormal:function(t,e){do var i=2*this.getUniform()-1,r=2*this.getUniform()-1,o=i*i+r*r;while(o>1||0==o);var n=i*Math.sqrt(-2*Math.log(o)/o);return(t||0)+n*(e||1)},getPercentage:function(){return 1+Math.floor(100*this.getUniform())},getWeightedValue:function(t){var e=0;for(var i in t)e+=t[i];var r=this.getUniform()*e,o=0;for(var i in t)if(o+=t[i],r<o)return i;return i},getState:function(){return[this._s0,this._s1,this._s2,this._c]},setState:function(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this},clone:function(){var t=Object.create(this);return t.setState(this.getState()),t},_s0:0,_s1:0,_s2:0,_c:0,_frac:2.3283064365386963e-10},r.RNG.setSeed(Date.now()),r.StringGenerator=function(t){this._options={words:!1,order:3,prior:.001};for(var e in t)this._options[e]=t[e];this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(var i=0;i<this._options.order;i++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}},r.StringGenerator.prototype.clear=function(){this._data={},this._priorValues={}},r.StringGenerator.prototype.generate=function(){for(var t=[this._sample(this._prefix)];t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))},r.StringGenerator.prototype.observe=function(t){for(var e=this._split(t),i=0;i<e.length;i++)this._priorValues[e[i]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(var i=this._options.order;i<e.length;i++)for(var r=e.slice(i-this._options.order,i),o=e[i],n=0;n<r.length;n++){var a=r.slice(n);this._observeEvent(a,o)}},r.StringGenerator.prototype.getStats=function(){var t=[],e=0;for(var i in this._priorValues)e++;e--,t.push("distinct samples: "+e);var r=0,o=0;for(var i in this._data){r++;for(var n in this._data[i])o++}return t.push("dictionary size (contexts): "+r),t.push("dictionary size (events): "+o),t.join(", ")},r.StringGenerator.prototype._split=function(t){return t.split(this._options.words?/\s+/:"")},r.StringGenerator.prototype._join=function(t){return t.join(this._options.words?" ":"")},r.StringGenerator.prototype._observeEvent=function(t,e){var i=this._join(t);i in this._data||(this._data[i]={});var r=this._data[i];e in r||(r[e]=0),r[e]++},r.StringGenerator.prototype._sample=function(t){t=this._backoff(t);var e=this._join(t),i=this._data[e],o={};if(this._options.prior){for(var n in this._priorValues)o[n]=this._priorValues[n];for(var n in i)o[n]+=i[n]}else o=i;return r.RNG.getWeightedValue(o)},r.StringGenerator.prototype._backoff=function(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t},r.EventQueue=function(){this._time=0,this._events=[],this._eventTimes=[]},r.EventQueue.prototype.getTime=function(){return this._time},r.EventQueue.prototype.clear=function(){return this._events=[],this._eventTimes=[],this},r.EventQueue.prototype.add=function(t,e){for(var i=this._events.length,r=0;r<this._eventTimes.length;r++)if(this._eventTimes[r]>e){i=r;break}this._events.splice(i,0,t),this._eventTimes.splice(i,0,e)},r.EventQueue.prototype.get=function(){if(!this._events.length)return null;var t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(var e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]},r.EventQueue.prototype.remove=function(t){var e=this._events.indexOf(t);return e!=-1&&(this._remove(e),!0)},r.EventQueue.prototype._remove=function(t){this._events.splice(t,1),this._eventTimes.splice(t,1)},r.Scheduler=function(){this._queue=new r.EventQueue,this._repeat=[],this._current=null},r.Scheduler.prototype.getTime=function(){return this._queue.getTime()},r.Scheduler.prototype.add=function(t,e){return e&&this._repeat.push(t),this},r.Scheduler.prototype.clear=function(){return this._queue.clear(),this._repeat=[],this._current=null,this},r.Scheduler.prototype.remove=function(t){var e=this._queue.remove(t),i=this._repeat.indexOf(t);return i!=-1&&this._repeat.splice(i,1),this._current==t&&(this._current=null),e},r.Scheduler.prototype.next=function(){return this._current=this._queue.get(),this._current},r.Scheduler.Simple=function(){r.Scheduler.call(this)},r.Scheduler.Simple.extend(r.Scheduler),r.Scheduler.Simple.prototype.add=function(t,e){return this._queue.add(t,0),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Simple.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&this._queue.add(this._current,0),r.Scheduler.prototype.next.call(this)},r.Scheduler.Speed=function(){r.Scheduler.call(this)},r.Scheduler.Speed.extend(r.Scheduler),r.Scheduler.Speed.prototype.add=function(t,e){return this._queue.add(t,1/t.getSpeed()),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Speed.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&this._queue.add(this._current,1/this._current.getSpeed()),r.Scheduler.prototype.next.call(this)},r.Scheduler.Action=function(){r.Scheduler.call(this),this._defaultDuration=1,this._duration=this._defaultDuration},r.Scheduler.Action.extend(r.Scheduler),r.Scheduler.Action.prototype.add=function(t,e,i){return this._queue.add(t,i||this._defaultDuration),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Action.prototype.clear=function(){return this._duration=this._defaultDuration,r.Scheduler.prototype.clear.call(this)},r.Scheduler.Action.prototype.remove=function(t){return t==this._current&&(this._duration=this._defaultDuration),r.Scheduler.prototype.remove.call(this,t)},r.Scheduler.Action.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),r.Scheduler.prototype.next.call(this)},r.Scheduler.Action.prototype.setDuration=function(t){return this._current&&(this._duration=t),this},r.Engine=function(t){this._scheduler=t,this._lock=1},r.Engine.prototype.start=function(){return this.unlock()},r.Engine.prototype.lock=function(){return this._lock++,this},r.Engine.prototype.unlock=function(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){var t=this._scheduler.next();if(!t)return this.lock();var e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this},r.Map=function(t,e){this._width=t||r.DEFAULT_WIDTH,this._height=e||r.DEFAULT_HEIGHT},r.Map.prototype.create=function(t){},r.Map.prototype._fillMap=function(t){for(var e=[],i=0;i<this._width;i++){e.push([]);for(var r=0;r<this._height;r++)e[i].push(t)}return e},r.Map.Arena=function(t,e){r.Map.call(this,t,e)},r.Map.Arena.extend(r.Map),r.Map.Arena.prototype.create=function(t){for(var e=this._width-1,i=this._height-1,r=0;r<=e;r++)for(var o=0;o<=i;o++){var n=r&&o&&r<e&&o<i;t(r,o,n?0:1)}return this},r.Map.DividedMaze=function(t,e){r.Map.call(this,t,e),this._stack=[]},r.Map.DividedMaze.extend(r.Map),r.Map.DividedMaze.prototype.create=function(t){var e=this._width,i=this._height;this._map=[];for(var r=0;r<e;r++){this._map.push([]);for(var o=0;o<i;o++){var n=0==r||0==o||r+1==e||o+1==i;this._map[r].push(n?1:0)}}this._stack=[[1,1,e-2,i-2]],this._process();for(var r=0;r<e;r++)for(var o=0;o<i;o++)t(r,o,this._map[r][o]);return this._map=null,this},r.Map.DividedMaze.prototype._process=function(){for(;this._stack.length;){var t=this._stack.shift();this._partitionRoom(t)}},r.Map.DividedMaze.prototype._partitionRoom=function(t){for(var e=[],i=[],r=t[0]+1;r<t[2];r++){var o=this._map[r][t[1]-1],n=this._map[r][t[3]+1];!o||!n||r%2||e.push(r)}for(var a=t[1]+1;a<t[3];a++){var s=this._map[t[0]-1][a],h=this._map[t[2]+1][a];!s||!h||a%2||i.push(a)}if(e.length&&i.length){var c=e.random(),l=i.random();this._map[c][l]=1;var u=[],p=[];u.push(p);for(var r=t[0];r<c;r++)this._map[r][l]=1,p.push([r,l]);var p=[];u.push(p);for(var r=c+1;r<=t[2];r++)this._map[r][l]=1,p.push([r,l]);var p=[];u.push(p);for(var a=t[1];a<l;a++)this._map[c][a]=1,p.push([c,a]);var p=[];u.push(p);for(var a=l+1;a<=t[3];a++)this._map[c][a]=1,p.push([c,a]);for(var f=u.random(),r=0;r<u.length;r++){var p=u[r];if(p!=f){var _=p.random();this._map[_[0]][_[1]]=0}}this._stack.push([t[0],t[1],c-1,l-1]),this._stack.push([c+1,t[1],t[2],l-1]),this._stack.push([t[0],l+1,c-1,t[3]]),this._stack.push([c+1,l+1,t[2],t[3]])}},r.Map.IceyMaze=function(t,e,i){r.Map.call(this,t,e),this._regularity=i||0},r.Map.IceyMaze.extend(r.Map),r.Map.IceyMaze.prototype.create=function(t){var e=this._width,i=this._height,o=this._fillMap(1);e-=e%2?1:2,i-=i%2?1:2;var n=0,a=0,s=0,h=0,c=0,l=!1,u=[[0,0],[0,0],[0,0],[0,0]];do if(n=1+2*Math.floor(r.RNG.getUniform()*(e-1)/2),a=1+2*Math.floor(r.RNG.getUniform()*(i-1)/2),c||(o[n][a]=0),!o[n][a]){this._randomize(u);do{0==Math.floor(r.RNG.getUniform()*(this._regularity+1))&&this._randomize(u),l=!0;for(var p=0;p<4;p++)if(s=n+2*u[p][0],h=a+2*u[p][1],this._isFree(o,s,h,e,i)){o[s][h]=0,o[n+u[p][0]][a+u[p][1]]=0,n=s,a=h,l=!1,c++;break}}while(!l)}while(c+1<e*i/4);for(var p=0;p<this._width;p++)for(var f=0;f<this._height;f++)t(p,f,o[p][f]);return this._map=null,this},r.Map.IceyMaze.prototype._randomize=function(t){for(var e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.RNG.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}},r.Map.IceyMaze.prototype._isFree=function(t,e,i,r,o){return!(e<1||i<1||e>=r||i>=o)&&t[e][i]},r.Map.EllerMaze=function(t,e){r.Map.call(this,t,e)},r.Map.EllerMaze.extend(r.Map),r.Map.EllerMaze.prototype.create=function(t){for(var e=this._fillMap(1),i=Math.ceil((this._width-2)/2),o=.375,n=[],a=[],s=0;s<i;s++)n.push(s),a.push(s);n.push(i-1);for(var h=1;h+3<this._height;h+=2)for(var s=0;s<i;s++){var c=2*s+1,l=h;e[c][l]=0,s!=n[s+1]&&r.RNG.getUniform()>o&&(this._addToList(s,n,a),e[c+1][l]=0),s!=n[s]&&r.RNG.getUniform()>o?this._removeFromList(s,n,a):e[c][l+1]=0}for(var s=0;s<i;s++){var c=2*s+1,l=h;e[c][l]=0,s!=n[s+1]&&(s==n[s]||r.RNG.getUniform()>o)&&(this._addToList(s,n,a),e[c+1][l]=0),this._removeFromList(s,n,a)}for(var s=0;s<this._width;s++)for(var h=0;h<this._height;h++)t(s,h,e[s][h]);return this},r.Map.EllerMaze.prototype._removeFromList=function(t,e,i){i[e[t]]=i[t],e[i[t]]=e[t],i[t]=t,e[t]=t},r.Map.EllerMaze.prototype._addToList=function(t,e,i){i[e[t+1]]=i[t],e[i[t]]=e[t+1],i[t]=t+1,e[t+1]=t},r.Map.Cellular=function(t,e,i){r.Map.call(this,t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8,connected:!1},this.setOptions(i),this._dirs=r.DIRS[this._options.topology],this._map=this._fillMap(0)},r.Map.Cellular.extend(r.Map),r.Map.Cellular.prototype.randomize=function(t){for(var e=0;e<this._width;e++)for(var i=0;i<this._height;i++)this._map[e][i]=r.RNG.getUniform()<t?1:0;return this},r.Map.Cellular.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e]},r.Map.Cellular.prototype.set=function(t,e,i){this._map[t][e]=i},r.Map.Cellular.prototype.create=function(t){for(var e=this._fillMap(0),i=this._options.born,r=this._options.survive,o=0;o<this._height;o++){var n=1,a=0;6==this._options.topology&&(n=2,a=o%2);for(var s=a;s<this._width;s+=n){var h=this._map[s][o],c=this._getNeighbors(s,o);h&&r.indexOf(c)!=-1?e[s][o]=1:h||i.indexOf(c)==-1||(e[s][o]=1)}}if(this._map=e,this._options.connected&&this._completeMaze(),t)for(var o=0;o<this._height;o++){var n=1,a=0;6==this._options.topology&&(n=2,a=o%2);for(var s=a;s<this._width;s+=n)t(s,o,e[s][o])}},r.Map.Cellular.prototype._getNeighbors=function(t,e){for(var i=0,r=0;r<this._dirs.length;r++){var o=this._dirs[r],n=t+o[0],a=e+o[1];n<0||n>=this._width||n<0||a>=this._width||(i+=1==this._map[n][a]?1:0)}return i},r.Map.Cellular.prototype._completeMaze=function(){for(var t=[],e={},i=0;i<this._width;i++)for(var o=0;o<this._height;o++)if(this._freeSpace(i,o)){var n=[i,o];e[this._pointKey(n)]=n,t.push([i,o])}var a=t[r.RNG.getUniformInt(0,t.length-1)],s=this._pointKey(a),h={};for(h[s]=a,delete e[s],this._findConnected(h,e,[a]);Object.keys(e).length>0;){var n=this._getFromTo(h,e),c=n[0],l=n[1],u={};u[this._pointKey(c)]=c,this._findConnected(u,e,[c],!0),this._tunnelToConnected(l,c,h,e);for(var p in u){var f=u[p];this._map[f[0]][f[1]]=0,h[p]=f,delete e[p]}}},r.Map.Cellular.prototype._getFromTo=function(t,e){for(var i,o,n,a=Object.keys(t),s=Object.keys(e),h=0;h<5;h++){if(a.length<s.length){var c=a;o=t[c[r.RNG.getUniformInt(0,c.length-1)]],i=this._getClosest(o,e)}else{var c=s;i=e[c[r.RNG.getUniformInt(0,c.length-1)]],o=this._getClosest(i,t)}if(n=(i[0]-o[0])*(i[0]-o[0])+(i[1]-o[1])*(i[1]-o[1]),n<64)break}return[i,o]},r.Map.Cellular.prototype._getClosest=function(t,e){var i=null,r=null;for(k in e){var o=e[k],n=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==r||n<r)&&(r=n,i=o)}return i},r.Map.Cellular.prototype._findConnected=function(t,e,i,r){for(;i.length>0;)for(var o=i.splice(0,1)[0],n=[[o[0]+1,o[1]],[o[0]-1,o[1]],[o[0],o[1]+1],[o[0],o[1]-1]],a=0;a<n.length;a++){var s=this._pointKey(n[a]);null==t[s]&&this._freeSpace(n[a][0],n[a][1])&&(t[s]=n[a],r||delete e[s],i.push(n[a]))}},r.Map.Cellular.prototype._tunnelToConnected=function(t,e,i,r){var o,n;this._pointKey(e);e[0]<t[0]?(o=e,n=t):(o=t,n=e);for(var a=o[0];a<=n[0];a++){this._map[a][o[1]]=0;var s=[a,o[1]],h=this._pointKey(s);i[h]=s,delete r[h]}var c=n[0];e[1]<t[1]?(o=e,n=t):(o=t,n=e);for(var l=o[1];l<n[1];l++){this._map[c][l]=0;var s=[c,l],h=this._pointKey(s);i[h]=s,delete r[h]}},r.Map.Cellular.prototype._freeSpace=function(t,e){return t>=0&&t<this._width&&e>=0&&e<this._height&&1!=this._map[t][e]},r.Map.Cellular.prototype._pointKey=function(t){return t[0]+"."+t[1]},r.Map.Dungeon=function(t,e){r.Map.call(this,t,e),this._rooms=[],this._corridors=[]},r.Map.Dungeon.extend(r.Map),r.Map.Dungeon.prototype.getRooms=function(){return this._rooms},r.Map.Dungeon.prototype.getCorridors=function(){return this._corridors},r.Map.Digger=function(t,e,i){r.Map.Dungeon.call(this,t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3};for(var o in i)this._options[o]=i[o];this._features={Room:4,Corridor:4},this._featureAttempts=20,this._walls={},this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)},r.Map.Digger.extend(r.Map.Dungeon),r.Map.Digger.prototype.create=function(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;var e=(this._width-2)*(this._height-2);this._firstRoom();var i=Date.now();do{var r=Date.now();if(r-i>this._options.timeLimit)break;var o=this._findWall();if(!o)break;var n=o.split(","),a=parseInt(n[0]),s=parseInt(n[1]),h=this._getDiggingDirection(a,s);if(h){var c=0;do if(c++,this._tryFeature(a,s,h[0],h[1])){this._removeSurroundingWalls(a,s),this._removeSurroundingWalls(a-h[0],s-h[1]);break}while(c<this._featureAttempts);var l=0;for(var u in this._walls)this._walls[u]>1&&l++}}while(this._dug/e<this._options.dugPercentage||l);if(this._addDoors(),t)for(var p=0;p<this._width;p++)for(var f=0;f<this._height;f++)t(p,f,this._map[p][f]);return this._walls={},this._map=null,this},r.Map.Digger.prototype._digCallback=function(t,e,i){0==i||2==i?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1},r.Map.Digger.prototype._isWallCallback=function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]},r.Map.Digger.prototype._canBeDugCallback=function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]},r.Map.Digger.prototype._priorityWallCallback=function(t,e){this._walls[t+","+e]=2},r.Map.Digger.prototype._firstRoom=function(){var t=Math.floor(this._width/2),e=Math.floor(this._height/2),i=r.Map.Feature.Room.createRandomCenter(t,e,this._options);this._rooms.push(i),i.create(this._digCallback)},r.Map.Digger.prototype._findWall=function(){var t=[],e=[];for(var i in this._walls){var r=this._walls[i];2==r?e.push(i):t.push(i)}var o=e.length?e:t;if(!o.length)return null;var i=o.random();return delete this._walls[i],i},r.Map.Digger.prototype._tryFeature=function(t,e,i,o){var n=r.RNG.getWeightedValue(this._features);return n=r.Map.Feature[n].createRandomAt(t,e,i,o,this._options),!!n.isValid(this._isWallCallback,this._canBeDugCallback)&&(n.create(this._digCallback),n instanceof r.Map.Feature.Room&&this._rooms.push(n),n instanceof r.Map.Feature.Corridor&&(n.createPriorityWalls(this._priorityWallCallback),this._corridors.push(n)),!0)},r.Map.Digger.prototype._removeSurroundingWalls=function(t,e){for(var i=r.DIRS[4],o=0;o<i.length;o++){var n=i[o],a=t+n[0],s=e+n[1];delete this._walls[a+","+s];var a=t+2*n[0],s=e+2*n[1];delete this._walls[a+","+s]}},r.Map.Digger.prototype._getDiggingDirection=function(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;for(var i=null,o=r.DIRS[4],n=0;n<o.length;n++){var a=o[n],s=t+a[0],h=e+a[1];if(!this._map[s][h]){if(i)return null;i=a}}return i?[-i[0],-i[1]]:null},r.Map.Digger.prototype._addDoors=function(){for(var t=this._map,e=function(e,i){return 1==t[e][i]},i=0;i<this._rooms.length;i++){var r=this._rooms[i];r.clearDoors(),r.addDoors(e)}},r.Map.Uniform=function(t,e,i){r.Map.Dungeon.call(this,t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3};for(var o in i)this._options[o]=i[o];this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)},r.Map.Uniform.extend(r.Map.Dungeon),r.Map.Uniform.prototype.create=function(t){for(var e=Date.now();;){var i=Date.now();if(i-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(var r=0;r<this._width;r++)for(var o=0;o<this._height;o++)t(r,o,this._map[r][o]);return this},r.Map.Uniform.prototype._generateRooms=function(){var t=this._width-2,e=this._height-2;do{var i=this._generateRoom();if(this._dug/(t*e)>this._options.roomDugPercentage)break}while(i)},r.Map.Uniform.prototype._generateRoom=function(){for(var t=0;t<this._roomAttempts;){t++;var e=r.Map.Feature.Room.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null},r.Map.Uniform.prototype._generateCorridors=function(){for(var t=0;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(var e=0;e<this._rooms.length;e++){var i=this._rooms[e];i.clearDoors(),i.create(this._digCallback)}for(this._unconnected=this._rooms.slice().randomize(),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){var r=this._connected.random(),o=this._closestRoom(this._unconnected,r),n=this._closestRoom(this._connected,o),a=this._connectRooms(o,n);if(!a)break;if(!this._unconnected.length)return!0}}return!1},r.Map.Uniform.prototype._closestRoom=function(t,e){for(var i=1/0,r=e.getCenter(),o=null,n=0;n<t.length;n++){var a=t[n],s=a.getCenter(),h=s[0]-r[0],c=s[1]-r[1],l=h*h+c*c;l<i&&(i=l,o=a)}return o},r.Map.Uniform.prototype._connectRooms=function(t,e){var i=t.getCenter(),r=e.getCenter(),o=r[0]-i[0],n=r[1]-i[1];if(Math.abs(o)<Math.abs(n))var a=n>0?2:0,s=(a+2)%4,h=e.getLeft(),c=e.getRight(),l=0;else var a=o>0?1:3,s=(a+2)%4,h=e.getTop(),c=e.getBottom(),l=1;var u=this._placeInWall(t,a);if(!u)return!1;if(u[l]>=h&&u[l]<=c){var p=u.slice(),f=null;switch(s){case 0:f=e.getTop()-1;break;case 1:f=e.getRight()+1;break;case 2:f=e.getBottom()+1;break;case 3:f=e.getLeft()-1}p[(l+1)%2]=f,this._digLine([u,p])}else if(u[l]<h-1||u[l]>c+1){var _=u[l]-r[l];switch(s){case 0:case 1:var d=_<0?3:1;break;case 2:case 3:var d=_<0?1:3}s=(s+d)%4;var p=this._placeInWall(e,s);if(!p)return!1;var g=[0,0];g[l]=u[l];var v=(l+1)%2;g[v]=p[v],this._digLine([u,g,p])}else{var v=(l+1)%2,p=this._placeInWall(e,s);if(!p)return!1;var g=Math.round((p[v]+u[v])/2),y=[0,0],m=[0,0];y[l]=u[l],y[v]=g,m[l]=p[l],m[v]=g,this._digLine([u,y,m,p])}t.addDoor(u[0],u[1]),e.addDoor(p[0],p[1]);var l=this._unconnected.indexOf(t);l!=-1&&(this._unconnected.splice(l,1),this._connected.push(t));var l=this._unconnected.indexOf(e);return l!=-1&&(this._unconnected.splice(l,1),this._connected.push(e)),!0},r.Map.Uniform.prototype._placeInWall=function(t,e){var i=[0,0],r=[0,0],o=0;switch(e){case 0:r=[1,0],i=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:r=[0,1],i=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:r=[1,0],i=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:r=[0,1],i=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}for(var n=[],a=-2,s=0;s<o;s++){var h=i[0]+s*r[0],c=i[1]+s*r[1];n.push(null);var l=1==this._map[h][c];l?a!=s-1&&(n[s]=[h,c]):(a=s,s&&(n[s-1]=null))}for(var s=n.length-1;s>=0;s--)n[s]||n.splice(s,1);return n.length?n.random():null},r.Map.Uniform.prototype._digLine=function(t){for(var e=1;e<t.length;e++){var i=t[e-1],o=t[e],n=new r.Map.Feature.Corridor(i[0],i[1],o[0],o[1]);n.create(this._digCallback),this._corridors.push(n)}},r.Map.Uniform.prototype._digCallback=function(t,e,i){this._map[t][e]=i,0==i&&this._dug++},r.Map.Uniform.prototype._isWallCallback=function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]},r.Map.Uniform.prototype._canBeDugCallback=function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]},r.Map.Rogue=function(t,e,i){r.Map.call(this,t,e),this._options={cellWidth:3,cellHeight:3};for(var o in i)this._options[o]=i[o];this._options.hasOwnProperty("roomWidth")||(this._options.roomWidth=this._calculateRoomSize(this._width,this._options.cellWidth)),this._options.hasOwnProperty("roomHeight")||(this._options.roomHeight=this._calculateRoomSize(this._height,this._options.cellHeight))},r.Map.Rogue.extend(r.Map),r.Map.Rogue.prototype.create=function(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(var e=0;e<this._width;e++)for(var i=0;i<this._height;i++)t(e,i,this.map[e][i]);return this},r.Map.Rogue.prototype._calculateRoomSize=function(t,e){var i=Math.floor(t/e*.8),r=Math.floor(t/e*.25);return r<2&&(r=2),i<2&&(i=2),[r,i]},r.Map.Rogue.prototype._initRooms=function(){for(var t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(var e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}},r.Map.Rogue.prototype._connectRooms=function(){var t,e,i,o,n,a=r.RNG.getUniformInt(0,this._options.cellWidth-1),s=r.RNG.getUniformInt(0,this._options.cellHeight-1),h=!1;do{var c=[0,2,4,6];c=c.randomize();do if(h=!1,t=c.pop(),e=a+r.DIRS[8][t][0],i=s+r.DIRS[8][t][1],!(e<0||e>=this._options.cellWidth||i<0||i>=this._options.cellHeight)){if(o=this.rooms[a][s],o.connections.length>0&&o.connections[0][0]==e&&o.connections[0][1]==i)break;n=this.rooms[e][i],0==n.connections.length&&(n.connections.push([a,s]),this.connectedCells.push([e,i]),a=e,s=i,h=!0)}while(c.length>0&&0==h)}while(c.length>0)},r.Map.Rogue.prototype._connectUnconnectedRooms=function(){var t=this._options.cellWidth,e=this._options.cellHeight;this.connectedCells=this.connectedCells.randomize();for(var i,o,n,a=0;a<this._options.cellWidth;a++)for(var s=0;s<this._options.cellHeight;s++)if(i=this.rooms[a][s],0==i.connections.length){var h=[0,2,4,6];h=h.randomize();var n=!1;do{var c=h.pop(),l=a+r.DIRS[8][c][0],u=s+r.DIRS[8][c][1];if(!(l<0||l>=t||u<0||u>=e)){if(o=this.rooms[l][u],n=!0,0==o.connections.length)break;for(var p=0;p<o.connections.length;p++)if(o.connections[p][0]==a&&o.connections[p][1]==s){n=!1;break}if(n)break}}while(h.length);n?i.connections.push([o.cellx,o.celly]):console.log("-- Unable to connect room.")}},r.Map.Rogue.prototype._createRandomRoomConnections=function(t){},r.Map.Rogue.prototype._createRooms=function(){for(var t,e,i,o,n,a=this._width,s=this._height,h=this._options.cellWidth,c=this._options.cellHeight,l=Math.floor(this._width/h),u=Math.floor(this._height/c),p=this._options.roomWidth,f=this._options.roomHeight,_=0;_<h;_++)for(var d=0;d<c;d++){
if(i=l*_,o=u*d,0==i&&(i=1),0==o&&(o=1),t=r.RNG.getUniformInt(p[0],p[1]),e=r.RNG.getUniformInt(f[0],f[1]),d>0)for(n=this.rooms[_][d-1];o-(n.y+n.height)<3;)o++;if(_>0)for(n=this.rooms[_-1][d];i-(n.x+n.width)<3;)i++;for(var g=Math.round(r.RNG.getUniformInt(0,l-t)/2),v=Math.round(r.RNG.getUniformInt(0,u-e)/2);i+g+t>=a;)g?g--:t--;for(;o+v+e>=s;)v?v--:e--;i+=g,o+=v,this.rooms[_][d].x=i,this.rooms[_][d].y=o,this.rooms[_][d].width=t,this.rooms[_][d].height=e;for(var y=i;y<i+t;y++)for(var m=o;m<o+e;m++)this.map[y][m]=0}},r.Map.Rogue.prototype._getWallPosition=function(t,e){var i,o,n;return 1==e||3==e?(i=r.RNG.getUniformInt(t.x+1,t.x+t.width-2),1==e?(o=t.y-2,n=o+1):(o=t.y+t.height+1,n=o-1),this.map[i][n]=0):2!=e&&4!=e||(o=r.RNG.getUniformInt(t.y+1,t.y+t.height-2),2==e?(i=t.x+t.width+1,n=i-1):(i=t.x-2,n=i+1),this.map[n][o]=0),[i,o]},r.Map.Rogue.prototype._drawCorridore=function(t,e){var i,o,n,a,s=e[0]-t[0],h=e[1]-t[1],c=t[0],l=t[1],u=[],p=Math.abs(s),f=Math.abs(h),_=r.RNG.getUniform(),d=_,g=1-_;for(o=s>0?2:6,n=h>0?4:0,p<f?(i=Math.ceil(f*d),u.push([n,i]),u.push([o,p]),i=Math.floor(f*g),u.push([n,i])):(i=Math.ceil(p*d),u.push([o,i]),u.push([n,f]),i=Math.floor(p*g),u.push([o,i])),this.map[c][l]=0;u.length>0;)for(a=u.pop();a[1]>0;)c+=r.DIRS[8][a[0]][0],l+=r.DIRS[8][a[0]][1],this.map[c][l]=0,a[1]=a[1]-1},r.Map.Rogue.prototype._createCorridors=function(){for(var t,e,i,r,o,n=this._options.cellWidth,a=this._options.cellHeight,s=0;s<n;s++)for(var h=0;h<a;h++){t=this.rooms[s][h];for(var c=0;c<t.connections.length;c++)e=t.connections[c],i=this.rooms[e[0]][e[1]],i.cellx>t.cellx?(r=2,o=4):i.cellx<t.cellx?(r=4,o=2):i.celly>t.celly?(r=3,o=1):i.celly<t.celly&&(r=1,o=3),this._drawCorridore(this._getWallPosition(t,r),this._getWallPosition(i,o))}},r.Map.Feature=function(){},r.Map.Feature.prototype.isValid=function(t){},r.Map.Feature.prototype.create=function(t){},r.Map.Feature.prototype.debug=function(){},r.Map.Feature.createRandomAt=function(t,e,i,r,o){},r.Map.Feature.Room=function(t,e,i,r,o,n){this._x1=t,this._y1=e,this._x2=i,this._y2=r,this._doors={},arguments.length>4&&this.addDoor(o,n)},r.Map.Feature.Room.extend(r.Map.Feature),r.Map.Feature.Room.createRandomAt=function(t,e,i,o,n){var a=n.roomWidth[0],s=n.roomWidth[1],h=r.RNG.getUniformInt(a,s),a=n.roomHeight[0],s=n.roomHeight[1],c=r.RNG.getUniformInt(a,s);if(1==i){var l=e-Math.floor(r.RNG.getUniform()*c);return new this(t+1,l,t+h,l+c-1,t,e)}if(i==-1){var l=e-Math.floor(r.RNG.getUniform()*c);return new this(t-h,l,t-1,l+c-1,t,e)}if(1==o){var u=t-Math.floor(r.RNG.getUniform()*h);return new this(u,e+1,u+h-1,e+c,t,e)}if(o==-1){var u=t-Math.floor(r.RNG.getUniform()*h);return new this(u,e-c,u+h-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")},r.Map.Feature.Room.createRandomCenter=function(t,e,i){var o=i.roomWidth[0],n=i.roomWidth[1],a=r.RNG.getUniformInt(o,n),o=i.roomHeight[0],n=i.roomHeight[1],s=r.RNG.getUniformInt(o,n),h=t-Math.floor(r.RNG.getUniform()*a),c=e-Math.floor(r.RNG.getUniform()*s),l=h+a-1,u=c+s-1;return new this(h,c,l,u)},r.Map.Feature.Room.createRandom=function(t,e,i){var o=i.roomWidth[0],n=i.roomWidth[1],a=r.RNG.getUniformInt(o,n),o=i.roomHeight[0],n=i.roomHeight[1],s=r.RNG.getUniformInt(o,n),h=t-a-1,c=e-s-1,l=1+Math.floor(r.RNG.getUniform()*h),u=1+Math.floor(r.RNG.getUniform()*c),p=l+a-1,f=u+s-1;return new this(l,u,p,f)},r.Map.Feature.Room.prototype.addDoor=function(t,e){return this._doors[t+","+e]=1,this},r.Map.Feature.Room.prototype.getDoors=function(t){for(var e in this._doors){var i=e.split(",");t(parseInt(i[0]),parseInt(i[1]))}return this},r.Map.Feature.Room.prototype.clearDoors=function(){return this._doors={},this},r.Map.Feature.Room.prototype.addDoors=function(t){for(var e=this._x1-1,i=this._x2+1,r=this._y1-1,o=this._y2+1,n=e;n<=i;n++)for(var a=r;a<=o;a++)n!=e&&n!=i&&a!=r&&a!=o||t(n,a)||this.addDoor(n,a);return this},r.Map.Feature.Room.prototype.debug=function(){console.log("room",this._x1,this._y1,this._x2,this._y2)},r.Map.Feature.Room.prototype.isValid=function(t,e){for(var i=this._x1-1,r=this._x2+1,o=this._y1-1,n=this._y2+1,a=i;a<=r;a++)for(var s=o;s<=n;s++)if(a==i||a==r||s==o||s==n){if(!t(a,s))return!1}else if(!e(a,s))return!1;return!0},r.Map.Feature.Room.prototype.create=function(t){for(var e=this._x1-1,i=this._x2+1,r=this._y1-1,o=this._y2+1,n=0,a=e;a<=i;a++)for(var s=r;s<=o;s++)n=a+","+s in this._doors?2:a==e||a==i||s==r||s==o?1:0,t(a,s,n)},r.Map.Feature.Room.prototype.getCenter=function(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]},r.Map.Feature.Room.prototype.getLeft=function(){return this._x1},r.Map.Feature.Room.prototype.getRight=function(){return this._x2},r.Map.Feature.Room.prototype.getTop=function(){return this._y1},r.Map.Feature.Room.prototype.getBottom=function(){return this._y2},r.Map.Feature.Corridor=function(t,e,i,r){this._startX=t,this._startY=e,this._endX=i,this._endY=r,this._endsWithAWall=!0},r.Map.Feature.Corridor.extend(r.Map.Feature),r.Map.Feature.Corridor.createRandomAt=function(t,e,i,o,n){var a=n.corridorLength[0],s=n.corridorLength[1],h=r.RNG.getUniformInt(a,s);return new this(t,e,t+i*h,e+o*h)},r.Map.Feature.Corridor.prototype.debug=function(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)},r.Map.Feature.Corridor.prototype.isValid=function(t,e){var i=this._startX,r=this._startY,o=this._endX-i,n=this._endY-r,a=1+Math.max(Math.abs(o),Math.abs(n));o&&(o/=Math.abs(o)),n&&(n/=Math.abs(n));for(var s=n,h=-o,c=!0,l=0;l<a;l++){var u=i+l*o,p=r+l*n;if(e(u,p)||(c=!1),t(u+s,p+h)||(c=!1),t(u-s,p-h)||(c=!1),!c){a=l,this._endX=u-o,this._endY=p-n;break}}if(0==a)return!1;if(1==a&&t(this._endX+o,this._endY+n))return!1;var f=!t(this._endX+o+s,this._endY+n+h),_=!t(this._endX+o-s,this._endY+n-h);return this._endsWithAWall=t(this._endX+o,this._endY+n),!f&&!_||!this._endsWithAWall},r.Map.Feature.Corridor.prototype.create=function(t){var e=this._startX,i=this._startY,r=this._endX-e,o=this._endY-i,n=1+Math.max(Math.abs(r),Math.abs(o));r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));for(var a=0;a<n;a++){var s=e+a*r,h=i+a*o;t(s,h,0)}return!0},r.Map.Feature.Corridor.prototype.createPriorityWalls=function(t){if(this._endsWithAWall){var e=this._startX,i=this._startY,r=this._endX-e,o=this._endY-i;r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));var n=o,a=-r;t(this._endX+r,this._endY+o),t(this._endX+n,this._endY+a),t(this._endX-n,this._endY-a)}},r.Noise=function(){},r.Noise.prototype.get=function(t,e){},r.Noise.Simplex=function(t){r.Noise.call(this),this._F2=.5*(Math.sqrt(3)-1),this._G2=(3-Math.sqrt(3))/6,this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];for(var e=[],i=t||256,o=0;o<i;o++)e.push(o);e=e.randomize(),this._perms=[],this._indexes=[];for(var o=0;o<2*i;o++)this._perms.push(e[o%i]),this._indexes.push(this._perms[o]%this._gradients.length)},r.Noise.Simplex.extend(r.Noise),r.Noise.Simplex.prototype.get=function(t,e){var i,r,o,n=this._perms,a=this._indexes,s=n.length/2,h=this._G2,c=0,l=0,u=0,p=(t+e)*this._F2,f=Math.floor(t+p),_=Math.floor(e+p),d=(f+_)*h,g=f-d,v=_-d,y=t-g,m=e-v;y>m?(r=1,o=0):(r=0,o=1);var b=y-r+h,w=m-o+h,M=y-1+2*h,S=m-1+2*h,x=f.mod(s),T=_.mod(s),k=.5-y*y-m*m;if(k>=0){k*=k,i=a[x+n[T]];var C=this._gradients[i];c=k*k*(C[0]*y+C[1]*m)}var D=.5-b*b-w*w;if(D>=0){D*=D,i=a[x+r+n[T+o]];var C=this._gradients[i];l=D*D*(C[0]*b+C[1]*w)}var E=.5-M*M-S*S;if(E>=0){E*=E,i=a[x+1+n[T+1]];var C=this._gradients[i];u=E*E*(C[0]*M+C[1]*S)}return 70*(c+l+u)},r.FOV=function(t,e){this._lightPasses=t,this._options={topology:8};for(var i in e)this._options[i]=e[i]},r.FOV.prototype.compute=function(t,e,i,r){},r.FOV.prototype._getCircle=function(t,e,i){var o,n,a,s=[];switch(this._options.topology){case 4:n=1,a=[0,1],o=[r.DIRS[8][7],r.DIRS[8][1],r.DIRS[8][3],r.DIRS[8][5]];break;case 6:o=r.DIRS[6],n=1,a=[-1,1];break;case 8:o=r.DIRS[4],n=2,a=[-1,1]}for(var h=t+a[0]*i,c=e+a[1]*i,l=0;l<o.length;l++)for(var u=0;u<i*n;u++)s.push([h,c]),h+=o[l][0],c+=o[l][1];return s},r.FOV.DiscreteShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.DiscreteShadowcasting.extend(r.FOV),r.FOV.DiscreteShadowcasting.prototype.compute=function(t,e,i,r){this._coords,this._map;if(r(t,e,0,1),this._lightPasses(t,e))for(var o,n,a,s,h,c=[],l=1;l<=i;l++)for(var u=this._getCircle(t,e,l),p=360/u.length,f=0;f<u.length;f++)if(a=u[f][0],s=u[f][1],o=p*(f-.5),n=o+p,h=!this._lightPasses(a,s),this._visibleCoords(Math.floor(o),Math.ceil(n),h,c)&&r(a,s,l,1),2==c.length&&0==c[0]&&360==c[1])return},r.FOV.DiscreteShadowcasting.prototype._visibleCoords=function(t,e,i,r){if(t<0){var o=arguments.callee(0,e,i,r),n=arguments.callee(360+t,360,i,r);return o||n}for(var a=0;a<r.length&&r[a]<t;)a++;if(a==r.length)return i&&r.push(t,e),!0;var s=0;if(a%2){for(;a<r.length&&r[a]<e;)a++,s++;return 0!=s&&(i&&(s%2?r.splice(a-s,s,e):r.splice(a-s,s)),!0)}for(;a<r.length&&r[a]<e;)a++,s++;return(t!=r[a-s]||1!=s)&&(i&&(s%2?r.splice(a-s,s,t):r.splice(a-s,s,t,e)),!0)},r.FOV.PreciseShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.PreciseShadowcasting.extend(r.FOV),r.FOV.PreciseShadowcasting.prototype.compute=function(t,e,i,r){if(r(t,e,0,1),this._lightPasses(t,e))for(var o,n,a,s,h,c,l=[],u=1;u<=i;u++)for(var p=this._getCircle(t,e,u),f=p.length,_=0;_<f;_++)if(o=p[_][0],n=p[_][1],s=[_?2*_-1:2*f-1,2*f],h=[2*_+1,2*f],a=!this._lightPasses(o,n),c=this._checkVisibility(s,h,a,l),c&&r(o,n,u,c),2==l.length&&0==l[0][0]&&l[1][0]==l[1][1])return},r.FOV.PreciseShadowcasting.prototype._checkVisibility=function(t,e,i,r){if(t[0]>e[0]){var o=this._checkVisibility(t,[t[1],t[1]],i,r),n=this._checkVisibility([0,1],e,i,r);return(o+n)/2}for(var a=0,s=!1;a<r.length;){var h=r[a],c=h[0]*t[1]-t[0]*h[1];if(c>=0){0!=c||a%2||(s=!0);break}a++}for(var l=r.length,u=!1;l--;){var h=r[l],c=e[0]*h[1]-h[0]*e[1];if(c>=0){0==c&&l%2&&(u=!0);break}}var p=!0;if(a==l&&(s||u)?p=!1:s&&u&&a+1==l&&l%2?p=!1:a>l&&a%2&&(p=!1),!p)return 0;var f,_,d=l-a+1;if(d%2)if(a%2){var _=r[a];f=(e[0]*_[1]-_[0]*e[1])/(_[1]*e[1]),i&&r.splice(a,d,e)}else{var _=r[l];f=(_[0]*t[1]-t[0]*_[1])/(t[1]*_[1]),i&&r.splice(a,d,t)}else{if(!(a%2))return i&&r.splice(a,d,t,e),1;var g=r[a],v=r[l];f=(v[0]*g[1]-g[0]*v[1])/(g[1]*v[1]),i&&r.splice(a,d)}var y=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]);return f/y},r.FOV.RecursiveShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.RecursiveShadowcasting.extend(r.FOV),r.FOV.RecursiveShadowcasting.OCTANTS=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]],r.FOV.RecursiveShadowcasting.prototype.compute=function(t,e,i,o){o(t,e,0,1);for(var n=0;n<r.FOV.RecursiveShadowcasting.OCTANTS.length;n++)this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[n],i,o)},r.FOV.RecursiveShadowcasting.prototype.compute180=function(t,e,i,o,n){n(t,e,0,1);var a=(o-1+8)%8,s=(o-2+8)%8,h=(o+1+8)%8;this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[s],i,n),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[a],i,n),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[o],i,n),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[h],i,n)},r.FOV.RecursiveShadowcasting.prototype.compute90=function(t,e,i,o,n){n(t,e,0,1);var a=(o-1+8)%8;this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[o],i,n),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[a],i,n)},r.FOV.RecursiveShadowcasting.prototype._renderOctant=function(t,e,i,r,o){this._castVisibility(t,e,1,1,0,r+1,i[0],i[1],i[2],i[3],o)},r.FOV.RecursiveShadowcasting.prototype._castVisibility=function(t,e,i,r,o,n,a,s,h,c,l){if(!(r<o))for(var u=i;u<=n;u++){for(var p=-u-1,f=-u,_=!1,d=0;p<=0;){p+=1;var g=t+p*a+f*s,v=e+p*h+f*c,y=(p-.5)/(f+.5),m=(p+.5)/(f-.5);if(!(m>r)){if(y<o)break;if(p*p+f*f<n*n&&l(g,v,u,1),_){if(!this._lightPasses(g,v)){d=m;continue}_=!1,r=d}else!this._lightPasses(g,v)&&u<n&&(_=!0,this._castVisibility(t,e,u+1,r,y,n,a,s,h,c,l),d=m)}}if(_)break}},r.Color={fromString:function(t){var e,i;if(t in this._cache)e=this._cache[t];else{if("#"==t.charAt(0)){var r=t.match(/[0-9a-f]/gi).map(function(t){return parseInt(t,16)});if(3==r.length)e=r.map(function(t){return 17*t});else{for(var o=0;o<3;o++)r[o+1]+=16*r[o],r.splice(o,1);e=r}}else e=(i=t.match(/rgb\(([0-9, ]+)\)/i))?i[1].split(/\s*,\s*/).map(function(t){return parseInt(t)}):[0,0,0];this._cache[t]=e}return e.slice()},add:function(t,e){for(var i=t.slice(),r=0;r<3;r++)for(var o=1;o<arguments.length;o++)i[r]+=arguments[o][r];return i},add_:function(t,e){for(var i=0;i<3;i++)for(var r=1;r<arguments.length;r++)t[i]+=arguments[r][i];return t},multiply:function(t,e){for(var i=t.slice(),r=0;r<3;r++){for(var o=1;o<arguments.length;o++)i[r]*=arguments[o][r]/255;i[r]=Math.round(i[r])}return i},multiply_:function(t,e){for(var i=0;i<3;i++){for(var r=1;r<arguments.length;r++)t[i]*=arguments[r][i]/255;t[i]=Math.round(t[i])}return t},interpolate:function(t,e,i){arguments.length<3&&(i=.5);for(var r=t.slice(),o=0;o<3;o++)r[o]=Math.round(r[o]+i*(e[o]-t[o]));return r},interpolateHSL:function(t,e,i){arguments.length<3&&(i=.5);for(var r=this.rgb2hsl(t),o=this.rgb2hsl(e),n=0;n<3;n++)r[n]+=i*(o[n]-r[n]);return this.hsl2rgb(r)},randomize:function(t,e){e instanceof Array||(e=Math.round(r.RNG.getNormal(0,e)));for(var i=t.slice(),o=0;o<3;o++)i[o]+=e instanceof Array?Math.round(r.RNG.getNormal(0,e[o])):e;return i},rgb2hsl:function(t){var e,i,r=t[0]/255,o=t[1]/255,n=t[2]/255,a=Math.max(r,o,n),s=Math.min(r,o,n),h=(a+s)/2;if(a==s)e=i=0;else{var c=a-s;switch(i=h>.5?c/(2-a-s):c/(a+s),a){case r:e=(o-n)/c+(o<n?6:0);break;case o:e=(n-r)/c+2;break;case n:e=(r-o)/c+4}e/=6}return[e,i,h]},hsl2rgb:function(t){var e=t[2];if(0==t[1])return e=Math.round(255*e),[e,e,e];var i=function(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t},r=t[1],o=e<.5?e*(1+r):e+r-e*r,n=2*e-o,a=i(n,o,t[0]+1/3),s=i(n,o,t[0]),h=i(n,o,t[0]-1/3);return[Math.round(255*a),Math.round(255*s),Math.round(255*h)]},toRGB:function(t){return"rgb("+this._clamp(t[0])+","+this._clamp(t[1])+","+this._clamp(t[2])+")"},toHex:function(t){for(var e=[],i=0;i<3;i++)e.push(this._clamp(t[i]).toString(16).lpad("0",2));return"#"+e.join("")},_clamp:function(t){return t<0?0:t>255?255:t},_cache:{black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},r.Lighting=function(t,e){this._reflectivityCallback=t,this._options={passes:1,emissionThreshold:100,range:10},this._fov=null,this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)},r.Lighting.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e];return t&&t.range&&this.reset(),this},r.Lighting.prototype.setFOV=function(t){return this._fov=t,this._fovCache={},this},r.Lighting.prototype.setLight=function(t,e,i){var o=t+","+e;return i?this._lights[o]="string"==typeof i?r.Color.fromString(i):i:delete this._lights[o],this},r.Lighting.prototype.clearLights=function(){this._lights={}},r.Lighting.prototype.reset=function(){return this._reflectivityCache={},this._fovCache={},this},r.Lighting.prototype.compute=function(t){var e={},i={},o={};for(var n in this._lights){var a=this._lights[n];i[n]=[0,0,0],r.Color.add_(i[n],a)}for(var s=0;s<this._options.passes;s++)this._emitLight(i,o,e),s+1!=this._options.passes&&(i=this._computeEmitters(o,e));for(var h in o){var c=h.split(","),l=parseInt(c[0]),u=parseInt(c[1]);t(l,u,o[h])}return this},r.Lighting.prototype._emitLight=function(t,e,i){for(var r in t){var o=r.split(","),n=parseInt(o[0]),a=parseInt(o[1]);this._emitLightFromCell(n,a,t[r],e),i[r]=1}return this},r.Lighting.prototype._computeEmitters=function(t,e){var i={};for(var r in t)if(!(r in e)){var o=t[r];if(r in this._reflectivityCache)var n=this._reflectivityCache[r];else{var a=r.split(","),s=parseInt(a[0]),h=parseInt(a[1]),n=this._reflectivityCallback(s,h);this._reflectivityCache[r]=n}if(0!=n){for(var c=[],l=0,u=0;u<3;u++){var p=Math.round(o[u]*n);c[u]=p,l+=p}l>this._options.emissionThreshold&&(i[r]=c)}}return i},r.Lighting.prototype._emitLightFromCell=function(t,e,i,r){var o=t+","+e;if(o in this._fovCache)var n=this._fovCache[o];else var n=this._updateFOV(t,e);for(var a in n){var s=n[a];if(a in r)var h=r[a];else{var h=[0,0,0];r[a]=h}for(var c=0;c<3;c++)h[c]+=Math.round(i[c]*s)}return this},r.Lighting.prototype._updateFOV=function(t,e){var i=t+","+e,r={};this._fovCache[i]=r;var o=this._options.range,n=function(t,e,i,n){var a=t+","+e,s=n*(1-i/o);0!=s&&(r[a]=s)};return this._fov.compute(t,e,o,n.bind(this)),r},r.Path=function(t,e,i,o){this._toX=t,this._toY=e,this._fromX=null,this._fromY=null,this._passableCallback=i,this._options={topology:8};for(var n in o)this._options[n]=o[n];this._dirs=r.DIRS[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])},r.Path.prototype.compute=function(t,e,i){},r.Path.prototype._getNeighbors=function(t,e){for(var i=[],r=0;r<this._dirs.length;r++){var o=this._dirs[r],n=t+o[0],a=e+o[1];this._passableCallback(n,a)&&i.push([n,a])}return i},r.Path.Dijkstra=function(t,e,i,o){r.Path.call(this,t,e,i,o),this._computed={},this._todo=[],this._add(t,e,null)},r.Path.Dijkstra.extend(r.Path),r.Path.Dijkstra.prototype.compute=function(t,e,i){var r=t+","+e;if(r in this._computed||this._compute(t,e),r in this._computed)for(var o=this._computed[r];o;)i(o.x,o.y),o=o.prev},r.Path.Dijkstra.prototype._compute=function(t,e){for(;this._todo.length;){var i=this._todo.shift();if(i.x==t&&i.y==e)return;for(var r=this._getNeighbors(i.x,i.y),o=0;o<r.length;o++){var n=r[o],a=n[0],s=n[1],h=a+","+s;h in this._computed||this._add(a,s,i)}}},r.Path.Dijkstra.prototype._add=function(t,e,i){var r={x:t,y:e,prev:i};this._computed[t+","+e]=r,this._todo.push(r)},r.Path.AStar=function(t,e,i,o){r.Path.call(this,t,e,i,o),this._todo=[],this._done={},this._fromX=null,this._fromY=null},r.Path.AStar.extend(r.Path),r.Path.AStar.prototype.compute=function(t,e,i){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){var r=this._todo.shift();if(r.x==t&&r.y==e)break;for(var o=this._getNeighbors(r.x,r.y),n=0;n<o.length;n++){var a=o[n],s=a[0],h=a[1],c=s+","+h;c in this._done||this._add(s,h,r)}}var r=this._done[t+","+e];if(r)for(;r;)i(r.x,r.y),r=r.prev},r.Path.AStar.prototype._add=function(t,e,i){var r={x:t,y:e,prev:i,g:i?i.g+1:0,h:this._distance(t,e)};this._done[t+","+e]=r;for(var o=r.g+r.h,n=0;n<this._todo.length;n++){var a=this._todo[n];if(o<a.g+a.h)return void this._todo.splice(n,0,r)}this._todo.push(r)},r.Path.AStar.prototype._distance=function(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:var i=Math.abs(t-this._fromX),r=Math.abs(e-this._fromY);return r+Math.max(0,(i-r)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}throw new Error("Illegal topology")},r.Display.Term=function(t){r.Display.Backend.call(this,t),this._cx=-1,this._cy=-1,this._lastColor="",this._options={},this._ox=0,this._oy=0,this._termcolor={}},r.Display.Term.extend(r.Display.Backend),r.Display.Term.prototype.compute=function(e){this._options=e,this._ox=Math.floor((t.stdout.columns-e.width)/2),this._oy=Math.floor((t.stdout.rows-e.height)/2),this._termcolor=new(r.Display.Term[e.termColor.capitalize()])(this._context),this._context._termcolor=this._termcolor},r.Display.Term.prototype.draw=function(e,i){var r=e[0],o=e[1],n=e[2],a=e[3],s=e[4],h=this._ox+r,c=this._oy+o;if(!(h<0||h>=t.stdout.columns)&&!(c<0||c>=t.stdout.rows)&&(h===this._cx&&c===this._cy||(t.stdout.write(this._termcolor.positionToAnsi(h,c)),this._cx=h,this._cy=c),i&&(n||(n=" ")),n)){var l=this._termcolor.colorToAnsi(a,s);l!==this._lastColor&&(t.stdout.write(l),this._lastColor=l);var u=[].concat(n);t.stdout.write(u[0]),this._cx++,this._cx>=t.stdout.columns&&(this._cx=0,this._cy++)}},r.Display.Term.prototype.computeSize=function(e,i){return[t.stdout.columns,t.stdout.rows]},r.Display.Term.prototype.computeFontSize=function(t,e){return 12},r.Display.Term.prototype.eventToPosition=function(t,e){return[t,e]},r.Display.Term.Color=function(t){this._context=t},r.Display.Term.Color.prototype.clearToAnsi=function(t){},r.Display.Term.Color.prototype.colorToAnsi=function(t,e){},r.Display.Term.Color.prototype.positionToAnsi=function(t,e){},r.Display.Term.Xterm=function(t){r.Display.Term.Color.call(this,t)},r.Display.Term.Xterm.extend(r.Display.Term.Color),r.Display.Term.Xterm.prototype.clearToAnsi=function(t){return"[0;48;5;"+this._termcolor(t)+"m[2J"},r.Display.Term.Xterm.prototype.colorToAnsi=function(t,e){return"[0;38;5;"+this._termcolor(t)+";48;5;"+this._termcolor(e)+"m"},r.Display.Term.Xterm.prototype.positionToAnsi=function(t,e){return"["+(e+1)+";"+(t+1)+"H"},r.Display.Term.Xterm.prototype._termcolor=function(t){var e=256,i=6,o=i/e,n=r.Color.fromString(t),a=Math.floor(n[0]*o),s=Math.floor(n[1]*o),h=Math.floor(n[2]*o);return 36*a+6*s+1*h+16};for(var o in r)i[o]=r[o]}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:12}],26:[function(t,e,i){e.exports=t("./lib/index")},{"./lib/index":27}],27:[function(t,e,i){(function(r){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var n,a=t("./ponyfill"),s=o(a);n="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof r?r:"undefined"!=typeof e?e:Function("return this")();var h=(0,s["default"])(n);i["default"]=h}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./ponyfill":28}],28:[function(t,e,i){"use strict";function r(t){var e,i=t.Symbol;return"function"==typeof i?i.observable?e=i.observable:(e=i("observable"),i.observable=e):e="@@observable",e}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=r},{}],29:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var o=t("redux"),n=t("redux-logger"),a=r(n),s=t("rot-js"),h=(r(s),t("./reducers")),c=r(h),l=t("./initialState"),u=r(l),p=t("./game"),f=r(p);!function(t,e){t.STATE=(0,o.createStore)(c["default"],u["default"],(0,o.applyMiddleware)((0,a["default"])()));var i=f["default"].init();i.switchScreen(i.Screen.StartScreen);var r=i.getDisplay();document.querySelector("#main-display").appendChild(r.getContainer())}(window,window.console)},{"./game":31,"./initialState":35,"./reducers":37,redux:23,"redux-logger":17,"rot-js":25}],30:[function(t,e,i){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=function(){function t(e,i,o){r(this,t),this._char=e||" ",this._fg=i||"white",this._bg=o||"black"}return o(t,[{key:"getChar",value:function(){function t(){return this._char}return t}()},{key:"getBackground",value:function(){function t(){return this._bg}return t}()},{key:"getForeground",value:function(){function t(){return this._fg}return t}()}]),t}();i["default"]=n},{}],31:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var o=t("rot-js"),n=r(o),a=t("./screen"),s=r(a),h={width:80,height:24,fontSize:15,forceSquareRatio:!0},c={Screen:s["default"],_display:null,_currentScreen:null,_screenWidth:h.width,_screenHeight:h.height,init:function(){function t(t){this._display=new n["default"].Display(Object.assign({},h,t));var e=this,i=function(){function t(t){window.addEventListener(t,function(i){null!==e._currentScreen&&(e._currentScreen.handleInput(t,i,e),e._display.clear(),e._currentScreen.render(e._display,e))})}return t}();return["keydown","keyup","keypress"].forEach(i),this}return t}(),getDisplay:function(){function t(){return this._display}return t}(),getScreenWidth:function(){function t(){return this._screenWidth}return t}(),getScreenHeight:function(){function t(){return this._screenHeight}return t}(),switchScreen:function(){function t(t){null!==this._currentScreen&&this._currentScreen.exit(),this.getDisplay().clear(),this._currentScreen=t,null!==!this._currentScreen&&(this._currentScreen.enter(),this._currentScreen.render(this._display,this))}return t}()};i["default"]=c},{"./screen":33,"rot-js":25}],32:[function(t,e,i){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=t("./tile"),a=function(){function t(e){r(this,t),this._tiles=e,this._width=e.length,this._height=e[0].length}return o(t,[{key:"getWidth",value:function(){function t(){return this._width}return t}()},{key:"getHeight",value:function(){function t(){return this._height}return t}()},{key:"getTile",value:function(){function t(t,e){var i=n.NullTile;return t<0||t>=this._width||e<0||e>=this.height||(i=this._tiles[t][e]||i),i}return t}()}]),t}();i["default"]=a},{"./tile":34}],33:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var o=t("rot-js"),n=r(o),a=t("./tile"),s=t("./map"),h=r(s),c={enter:function(){function t(){return console.log("Entered StartScreen")}return t}(),exit:function(){function t(){return console.log("Exited StartScreen")}return t}(),render:function(){function t(t){t.drawText(1,1,"%c{yellow}Javascript Roguelike"),t.drawText(1,2,"Press [Enter] to start!")}return t}(),handleInput:function(){function t(t,e,i){"keydown"===t&&e.keyCode===n["default"].VK_RETURN&&i.switchScreen(l)}return t}()},l={_map:null,_centerX:0,_centerY:0,enter:function(){function t(){for(var t=250,e=250,i=new n["default"].Map.Cellular(t,e),r=3,o=[],s=0;s<t;s++){o.push([]);for(var c=0;c<e;c++)o[s].push(a.NullTile)}i.randomize(.5);for(var l=0;l<r-1;l++)i.create();i.create(function(t,e,i){1===i?o[t][e]=a.FloorTile:o[t][e]=a.WallTile}),this._map=new h["default"](o)}return t}(),move:function(){function t(t,e){this._centerX=Math.max(0,Math.min(this._map.getWidth()-1,this._centerX+t)),this._centerY=Math.max(0,Math.min(this._map.getHeight()-1,this._centerY+e))}return t}(),exit:function(){function t(){console.log("Exited PlayScreen")}return t}(),render:function(){function t(t,e){for(var i=e.getScreenWidth(),r=e.getScreenHeight(),o=Math.min(Math.max(0,this._centerX-i/2),this._map.getWidth()-i),n=Math.min(Math.max(0,this._centerY-r/2),this._map.getHeight()-r),a=o;a<o+i;a++)for(var s=n;s<n+r;s++){var h=this._map.getTile(a,s).getGlyph();t.draw(a-o,s-n,h.getChar(),h.getForeground(),h.getBackground())}t.draw(this._centerX-o,this._centerY-n,"@","white","black")}return t}(),handleInput:function(){function t(t,e,i){"keydown"===t&&(e.keyCode===n["default"].VK_RETURN?i.switchScreen(u):e.keyCode===n["default"].VK_ESCAPE&&i.switchScreen(p),e.keyCode===n["default"].VK_LEFT?this.move(-1,0):e.keyCode===n["default"].VK_RIGHT?this.move(1,0):e.keyCode===n["default"].VK_UP?this.move(0,-1):e.keyCode===n["default"].VK_DOWN&&this.move(0,1))}return t}()},u={enter:function(){function t(){return console.log("Entered WinScreen")}return t}(),exit:function(){function t(){return console.log("Exited WinScreen")}return t}(),render:function(){function t(t){for(var e=0;e<22;e++){var i=Math.round(255*Math.random()),r=Math.round(255*Math.random()),o=Math.round(255*Math.random()),a=n["default"].Color.toRGB([i,r,o]);t.drawText(2,e+1,"%b{"+String(a)+"}You win!")}}return t}(),handleInput:function(){function t(t,e,i){}return t}()},p={enter:function(){function t(){return console.log("Entered LoseScreen")}return t}(),exit:function(){function t(){return console.log("Exited LoseScreen")}return t}(),render:function(){function t(t){for(var e=0;e<22;e++)t.drawText(2,e+1,"%b{red}You lose! :(")}return t}(),handleInput:function(){function t(t,e,i){}return t}()};i["default"]={StartScreen:c,PlayScreen:l,WinScreen:u,LoseScreen:p}},{"./map":32,"./tile":34,"rot-js":25}],34:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0}),i.WallTile=i.FloorTile=i.NullTile=void 0;var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),
r&&t(e,r),e}}(),a=t("./glyph"),s=r(a),h=function(){function t(e){o(this,t),this._glyph=e}return n(t,[{key:"getGlyph",value:function(){function t(){return this._glyph}return t}()}]),t}();i["default"]=h;i.NullTile=new h(new s["default"]),i.FloorTile=new h(new s["default"](".")),i.WallTile=new h(new s["default"]("#","goldenrod"))},{"./glyph":30}],35:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r={game:{messages:[]}};i["default"]=r},{}],36:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var o=t("../initialState"),n=r(o),a=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n["default"].game,e=arguments[1];switch(e.type){case"ADD_MESSAGE":return Object.assign({},t,{messages:t.messages.concat([e.message])});default:return t}};i["default"]=a},{"../initialState":35}],37:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var o=t("redux"),n=t("./game"),a=r(n),s=(0,o.combineReducers)({game:a["default"]});i["default"]=s},{"./game":36,redux:23}]},{},[29]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
