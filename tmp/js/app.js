!function t(e,i,r){function n(s,a){if(!i[s]){if(!e[s]){var h="function"==typeof require&&require;if(!a&&h)return h(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=i[s]={exports:{}};e[s][0].call(c.exports,function(t){var i=e[s][1][t];return n(i?i:t)},c,c.exports,t,e,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(t,e,i){function r(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(u===setTimeout)return setTimeout(t,0);if((u===r||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function s(t){if(p===clearTimeout)return clearTimeout(t);if((p===n||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(t);try{return p(t)}catch(e){try{return p.call(null,t)}catch(e){return p.call(this,t)}}}function a(){g&&f&&(g=!1,f.length?d=f.concat(d):m=-1,d.length&&h())}function h(){if(!g){var t=o(a);g=!0;for(var e=d.length;e;){for(f=d,d=[];++m<e;)f&&f[m].run();m=-1,e=d.length}f=null,g=!1,s(t)}}function l(t,e){this.fun=t,this.array=e}function c(){}var u,p,_=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:r}catch(t){u=r}try{p="function"==typeof clearTimeout?clearTimeout:n}catch(t){p=n}}();var f,d=[],g=!1,m=-1;_.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];d.push(new l(t,e)),1!==d.length||g||o(h)},l.prototype.run=function(){this.fun.apply(null,this.array)},_.title="browser",_.browser=!0,_.env={},_.argv=[],_.version="",_.versions={},_.on=c,_.addListener=c,_.once=c,_.off=c,_.removeListener=c,_.removeAllListeners=c,_.emit=c,_.binding=function(t){throw new Error("process.binding is not supported")},_.cwd=function(){return"/"},_.chdir=function(t){throw new Error("process.chdir is not supported")},_.umask=function(){return 0}},{}],2:[function(t,e,i){(function(t,e){e.requestAnimationFrame=function(t){return setTimeout(t,1e3/60)},e.document={body:{appendChild:function(t){},scrollLeft:0,scrollTop:0},createElement:function(e){var i;return i={getBoundingClientRect:function(){var t;return t={left:0,top:0}},getContext:function(e){var r;return r={_termcolor:null,beginPath:function(){},canvas:i,clearRect:function(e,i,r,n){if(null!==this._termcolor){var o=this._termcolor.clearToAnsi(this.fillStyle);t.stdout.write(o)}},drawImage:function(t,e,i,r,n,o,s,a,h){},fill:function(){},fillRect:function(e,i,r,n){if(null!==this._termcolor){var o=this._termcolor.clearToAnsi(this.fillStyle);t.stdout.write(o)}},fillStyle:"#000",fillText:function(t,e,i){},font:"monospace",lineTo:function(t,e){},measureText:function(t){var e;return e={width:12}},moveTo:function(t,e){},textAlign:"center",textBaseline:"middle"}},height:0,style:{left:"100px",position:"absolute",top:"100px",visibility:"hidden"},width:0}},documentElement:{scrollLeft:0,scrollTop:0}};var r={isSupported:function(){return!(!document.createElement("canvas").getContext||!Function.prototype.bind)},DEFAULT_WIDTH:80,DEFAULT_HEIGHT:25,DIRS:{4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95};r.Text={RE_COLORS:/%([bc]){([^}]*)}/g,TYPE_TEXT:0,TYPE_NEWLINE:1,TYPE_FG:2,TYPE_BG:3,measure:function(t,e){for(var i={width:0,height:1},r=this.tokenize(t,e),n=0,o=0;o<r.length;o++){var s=r[o];switch(s.type){case this.TYPE_TEXT:n+=s.value.length;break;case this.TYPE_NEWLINE:i.height++,i.width=Math.max(i.width,n),n=0}}return i.width=Math.max(i.width,n),i},tokenize:function(t,e){var i=[],n=0;t.replace(this.RE_COLORS,function(e,o,s,a){var h=t.substring(n,a);return h.length&&i.push({type:r.Text.TYPE_TEXT,value:h}),i.push({type:"c"==o?r.Text.TYPE_FG:r.Text.TYPE_BG,value:s.trim()}),n=a+e.length,""});var o=t.substring(n);return o.length&&i.push({type:r.Text.TYPE_TEXT,value:o}),this._breakLines(i,e)},_breakLines:function(t,e){e||(e=1/0);for(var i=0,n=0,o=-1;i<t.length;){var s=t[i];if(s.type==r.Text.TYPE_NEWLINE&&(n=0,o=-1),s.type==r.Text.TYPE_TEXT){for(;0==n&&" "==s.value.charAt(0);)s.value=s.value.substring(1);var a=s.value.indexOf("\n");if(a!=-1){s.value=this._breakInsideToken(t,i,a,!0);for(var h=s.value.split("");h.length&&" "==h[h.length-1];)h.pop();s.value=h.join("")}if(s.value.length){if(n+s.value.length>e){for(var a=-1;;){var l=s.value.indexOf(" ",a+1);if(l==-1)break;if(n+l>e)break;a=l}if(a!=-1)s.value=this._breakInsideToken(t,i,a,!0);else if(o!=-1){var s=t[o],c=s.value.lastIndexOf(" ");s.value=this._breakInsideToken(t,o,c,!0),i=o}else s.value=this._breakInsideToken(t,i,e-n,!1)}else n+=s.value.length,s.value.indexOf(" ")!=-1&&(o=i);i++}else t.splice(i,1)}else i++}t.push({type:r.Text.TYPE_NEWLINE});for(var u=null,i=0;i<t.length;i++){var s=t[i];switch(s.type){case r.Text.TYPE_TEXT:u=s;break;case r.Text.TYPE_NEWLINE:if(u){for(var h=u.value.split("");h.length&&" "==h[h.length-1];)h.pop();u.value=h.join("")}u=null}}return t.pop(),t},_breakInsideToken:function(t,e,i,n){var o={type:r.Text.TYPE_NEWLINE},s={type:r.Text.TYPE_TEXT,value:t[e].value.substring(i+(n?1:0))};return t.splice(e+1,0,o,s),t[e].value.substring(0,i)}},Array.prototype.random=Array.prototype.random||function(){return this.length?this[Math.floor(r.RNG.getUniform()*this.length)]:null},Array.prototype.randomize=Array.prototype.randomize||function(){for(var t=[];this.length;){var e=this.indexOf(this.random());t.push(this.splice(e,1)[0])}return t},Number.prototype.mod=Number.prototype.mod||function(t){return(this%t+t)%t},String.prototype.capitalize=String.prototype.capitalize||function(){return this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.lpad=String.prototype.lpad||function(t,e){for(var i=t||"0",r=e||2,n="";n.length<r-this.length;)n+=i;return n=n.substring(0,r-this.length),n+this},String.prototype.rpad=String.prototype.rpad||function(t,e){for(var i=t||"0",r=e||2,n="";n.length<r-this.length;)n+=i;return n=n.substring(0,r-this.length),this+n},String.format=String.format||function(t){var e=String.format.map,i=Array.prototype.slice.call(arguments,1),r=function(r,n,o,s){if("%"==t.charAt(s-1))return r.substring(1);if(!i.length)return r;var a=i[0],h=n||o,l=h.split(","),c=l.shift(),u=e[c.toLowerCase()];if(!u)return r;var a=i.shift(),p=a[u].apply(a,l),_=c.charAt(0);return _!=_.toLowerCase()&&(p=p.capitalize()),p};return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,r)},String.format.map=String.format.map||{s:"toString"},String.prototype.format=String.prototype.format||function(){var t=Array.prototype.slice.call(arguments);return t.unshift(this),String.format.apply(String,t)},Object.create||(Object.create=function(t){var e=function(){};return e.prototype=t,new e}),Function.prototype.extend=Function.prototype.extend||function(t){return this.prototype=Object.create(t.prototype),this.prototype.constructor=this,this},"undefined"!=typeof window&&(window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},window.cancelAnimationFrame=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return clearTimeout(t)}),r.Display=function(t){var e=document.createElement("canvas");this._context=e.getContext("2d"),this._data={},this._dirty=!1,this._options={},this._backend=null;var i={width:r.DEFAULT_WIDTH,height:r.DEFAULT_HEIGHT,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1,termColor:"xterm"};for(var n in t)i[n]=t[n];this.setOptions(i),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),requestAnimationFrame(this._tick)},r.Display.prototype.DEBUG=function(t,e,i){var r=[this._options.bg,this._options.fg];this.draw(t,e,null,null,r[i%r.length])},r.Display.prototype.clear=function(){this._data={},this._dirty=!0},r.Display.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e];if(t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){t.layout&&(this._backend=new(r.Display[t.layout.capitalize()])(this._context));var i=(this._options.fontStyle?this._options.fontStyle+" ":"")+this._options.fontSize+"px "+this._options.fontFamily;this._context.font=i,this._backend.compute(this._options),this._context.font=i,this._context.textAlign="center",this._context.textBaseline="middle",this._dirty=!0}return this},r.Display.prototype.getOptions=function(){return this._options},r.Display.prototype.getContainer=function(){return this._context.canvas},r.Display.prototype.computeSize=function(t,e){return this._backend.computeSize(t,e,this._options)},r.Display.prototype.computeFontSize=function(t,e){return this._backend.computeFontSize(t,e,this._options)},r.Display.prototype.eventToPosition=function(t){if(t.touches)var e=t.touches[0].clientX,i=t.touches[0].clientY;else var e=t.clientX,i=t.clientY;var r=this._context.canvas.getBoundingClientRect();return e-=r.left,i-=r.top,e<0||i<0||e>=this._context.canvas.width||i>=this._context.canvas.height?[-1,-1]:this._backend.eventToPosition(e,i)},r.Display.prototype.draw=function(t,e,i,r,n){r||(r=this._options.fg),n||(n=this._options.bg),this._data[t+","+e]=[t,e,i,r,n],this._dirty!==!0&&(this._dirty||(this._dirty={}),this._dirty[t+","+e]=!0)},r.Display.prototype.drawText=function(t,e,i,n){var o=null,s=null,a=t,h=e,l=1;n||(n=this._options.width-t);for(var c=r.Text.tokenize(i,n);c.length;){var u=c.shift();switch(u.type){case r.Text.TYPE_TEXT:for(var p=!1,_=!1,f=!1,d=!1,g=0;g<u.value.length;g++){var m=u.value.charCodeAt(g),v=u.value.charAt(g);f=m>255&&m<65377||m>65500&&m<65512&&m>65518,p=32==v.charCodeAt(0)||12288==v.charCodeAt(0),!d||f||p||a++,f&&!_&&a++,this.draw(a++,h,v,o,s),_=p,d=f}break;case r.Text.TYPE_FG:o=u.value||null;break;case r.Text.TYPE_BG:s=u.value||null;break;case r.Text.TYPE_NEWLINE:a=t,h++,l++}}return l},r.Display.prototype._tick=function(){if(requestAnimationFrame(this._tick),this._dirty){if(this._dirty===!0){this._context.fillStyle=this._options.bg,this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height);for(var t in this._data)this._draw(t,!1)}else for(var e in this._dirty)this._draw(e,!0);this._dirty=!1}},r.Display.prototype._draw=function(t,e){var i=this._data[t];i[4]!=this._options.bg&&(e=!0),this._backend.draw(i,e)},r.Display.Backend=function(t){this._context=t},r.Display.Backend.prototype.compute=function(t){},r.Display.Backend.prototype.draw=function(t,e){},r.Display.Backend.prototype.computeSize=function(t,e){},r.Display.Backend.prototype.computeFontSize=function(t,e){},r.Display.Backend.prototype.eventToPosition=function(t,e){},r.Display.Rect=function(t){r.Display.Backend.call(this,t),this._spacingX=0,this._spacingY=0,this._canvasCache={},this._options={}},r.Display.Rect.extend(r.Display.Backend),r.Display.Rect.cache=!1,r.Display.Rect.prototype.compute=function(t){this._canvasCache={},this._options=t;var e=Math.ceil(this._context.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),this._options.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._context.canvas.width=t.width*this._spacingX,this._context.canvas.height=t.height*this._spacingY},r.Display.Rect.prototype.draw=function(t,e){this.constructor.cache?this._drawWithCache(t,e):this._drawNoCache(t,e)},r.Display.Rect.prototype._drawWithCache=function(t,e){var i=t[0],r=t[1],n=t[2],o=t[3],s=t[4],a=""+n+o+s;if(a in this._canvasCache)var h=this._canvasCache[a];else{var l=this._options.border,h=document.createElement("canvas"),c=h.getContext("2d");if(h.width=this._spacingX,h.height=this._spacingY,c.fillStyle=s,c.fillRect(l,l,h.width-l,h.height-l),n){c.fillStyle=o,c.font=this._context.font,c.textAlign="center",c.textBaseline="middle";for(var u=[].concat(n),p=0;p<u.length;p++)c.fillText(u[p],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[a]=h}this._context.drawImage(h,i*this._spacingX,r*this._spacingY)},r.Display.Rect.prototype._drawNoCache=function(t,e){var i=t[0],r=t[1],n=t[2],o=t[3],s=t[4];if(e){var a=this._options.border;this._context.fillStyle=s,this._context.fillRect(i*this._spacingX+a,r*this._spacingY+a,this._spacingX-a,this._spacingY-a)}if(n){this._context.fillStyle=o;for(var h=[].concat(n),l=0;l<h.length;l++)this._context.fillText(h[l],(i+.5)*this._spacingX,Math.ceil((r+.5)*this._spacingY))}},r.Display.Rect.prototype.computeSize=function(t,e){var i=Math.floor(t/this._spacingX),r=Math.floor(e/this._spacingY);return[i,r]},r.Display.Rect.prototype.computeFontSize=function(t,e){var i=Math.floor(t/this._options.width),r=Math.floor(e/this._options.height),n=this._context.font;this._context.font="100px "+this._options.fontFamily;var o=Math.ceil(this._context.measureText("W").width);this._context.font=n;var s=o/100,a=s*r/i;return a>1&&(r=Math.floor(r/a)),Math.floor(r/this._options.spacing)},r.Display.Rect.prototype.eventToPosition=function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]},r.Display.Hex=function(t){r.Display.Backend.call(this,t),this._spacingX=0,this._spacingY=0,this._hexSize=0,this._options={}},r.Display.Hex.extend(r.Display.Backend),r.Display.Hex.prototype.compute=function(t){this._options=t;var e=Math.ceil(this._context.measureText("W").width);if(this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose)var i="height",r="width";else var i="width",r="height";this._context.canvas[i]=Math.ceil((t.width+1)*this._spacingX),this._context.canvas[r]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)},r.Display.Hex.prototype.draw=function(t,e){var i=t[0],r=t[1],n=t[2],o=t[3],s=t[4],a=[(i+1)*this._spacingX,r*this._spacingY+this._hexSize];if(this._options.transpose&&a.reverse(),e&&(this._context.fillStyle=s,this._fill(a[0],a[1])),n){this._context.fillStyle=o;for(var h=[].concat(n),l=0;l<h.length;l++)this._context.fillText(h[l],a[0],Math.ceil(a[1]))}},r.Display.Hex.prototype.computeSize=function(t,e){this._options.transpose&&(t+=e,e=t-e,t-=e);var i=Math.floor(t/this._spacingX)-1,r=Math.floor((e-2*this._hexSize)/this._spacingY+1);return[i,r]},r.Display.Hex.prototype.computeFontSize=function(t,e){this._options.transpose&&(t+=e,e=t-e,t-=e);var i=2*t/((this._options.width+1)*Math.sqrt(3))-1,r=e/(2+1.5*(this._options.height-1)),n=Math.min(i,r),o=this._context.font;this._context.font="100px "+this._options.fontFamily;var s=Math.ceil(this._context.measureText("W").width);this._context.font=o;var a=s/100;n=Math.floor(n)+1;var h=2*n/(this._options.spacing*(1+a/Math.sqrt(3)));return Math.ceil(h)-1},r.Display.Hex.prototype.eventToPosition=function(t,e){if(this._options.transpose){t+=e,e=t-e,t-=e;var i="width"}else var i="height";var r=this._context.canvas[i]/this._options[i];return e=Math.floor(e/r),e.mod(2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]},r.Display.Hex.prototype._fill=function(t,e){var i=this._hexSize,r=this._options.border;this._context.beginPath(),this._options.transpose?(this._context.moveTo(t-i+r,e),this._context.lineTo(t-i/2+r,e+this._spacingX-r),this._context.lineTo(t+i/2-r,e+this._spacingX-r),this._context.lineTo(t+i-r,e),this._context.lineTo(t+i/2-r,e-this._spacingX+r),this._context.lineTo(t-i/2+r,e-this._spacingX+r),this._context.lineTo(t-i+r,e)):(this._context.moveTo(t,e-i+r),this._context.lineTo(t+this._spacingX-r,e-i/2+r),this._context.lineTo(t+this._spacingX-r,e+i/2-r),this._context.lineTo(t,e+i-r),this._context.lineTo(t-this._spacingX+r,e+i/2-r),this._context.lineTo(t-this._spacingX+r,e-i/2+r),this._context.lineTo(t,e-i+r)),this._context.fill()},r.Display.Tile=function(t){r.Display.Rect.call(this,t),this._options={},this._colorCanvas=document.createElement("canvas")},r.Display.Tile.extend(r.Display.Rect),r.Display.Tile.prototype.compute=function(t){this._options=t,this._context.canvas.width=t.width*t.tileWidth,this._context.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight},r.Display.Tile.prototype.draw=function(t,e){var i=t[0],r=t[1],n=t[2],o=t[3],s=t[4],a=this._options.tileWidth,h=this._options.tileHeight;if(e&&(this._options.tileColorize?this._context.clearRect(i*a,r*h,a,h):(this._context.fillStyle=s,this._context.fillRect(i*a,r*h,a,h))),n)for(var l=[].concat(n),c=0;c<l.length;c++){var u=this._options.tileMap[l[c]];if(!u)throw new Error("Char '"+l[c]+"' not found in tileMap");if(this._options.tileColorize){var p=this._colorCanvas,_=p.getContext("2d");_.clearRect(0,0,a,h),_.drawImage(this._options.tileSet,u[0],u[1],a,h,0,0,a,h),"transparent"!=o&&(_.fillStyle=o,_.globalCompositeOperation="source-atop",_.fillRect(0,0,a,h)),"transparent"!=s&&(_.fillStyle=s,_.globalCompositeOperation="destination-over",_.fillRect(0,0,a,h)),this._context.drawImage(p,i*a,r*h,a,h)}else this._context.drawImage(this._options.tileSet,u[0],u[1],a,h,i*a,r*h,a,h)}},r.Display.Tile.prototype.computeSize=function(t,e){var i=Math.floor(t/this._options.tileWidth),r=Math.floor(e/this._options.tileHeight);return[i,r]},r.Display.Tile.prototype.computeFontSize=function(t,e){var i=Math.floor(t/this._options.width),r=Math.floor(e/this._options.height);return[i,r]},r.Display.Tile.prototype.eventToPosition=function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]},r.RNG={getSeed:function(){return this._seed},setSeed:function(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*this._frac,t=69069*t+1>>>0,this._s1=t*this._frac,t=69069*t+1>>>0,this._s2=t*this._frac,this._c=1,this},getUniform:function(){var t=2091639*this._s0+this._c*this._frac;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2},getUniformInt:function(t,e){var i=Math.max(t,e),r=Math.min(t,e);return Math.floor(this.getUniform()*(i-r+1))+r},getNormal:function(t,e){do var i=2*this.getUniform()-1,r=2*this.getUniform()-1,n=i*i+r*r;while(n>1||0==n);var o=i*Math.sqrt(-2*Math.log(n)/n);return(t||0)+o*(e||1)},getPercentage:function(){return 1+Math.floor(100*this.getUniform())},getWeightedValue:function(t){var e=0;for(var i in t)e+=t[i];var r=this.getUniform()*e,n=0;for(var i in t)if(n+=t[i],r<n)return i;return i},getState:function(){return[this._s0,this._s1,this._s2,this._c]},setState:function(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this},clone:function(){var t=Object.create(this);return t.setState(this.getState()),t},_s0:0,_s1:0,_s2:0,_c:0,_frac:2.3283064365386963e-10},r.RNG.setSeed(Date.now()),r.StringGenerator=function(t){this._options={words:!1,order:3,prior:.001};for(var e in t)this._options[e]=t[e];this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(var i=0;i<this._options.order;i++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}},r.StringGenerator.prototype.clear=function(){this._data={},this._priorValues={}},r.StringGenerator.prototype.generate=function(){for(var t=[this._sample(this._prefix)];t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))},r.StringGenerator.prototype.observe=function(t){for(var e=this._split(t),i=0;i<e.length;i++)this._priorValues[e[i]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(var i=this._options.order;i<e.length;i++)for(var r=e.slice(i-this._options.order,i),n=e[i],o=0;o<r.length;o++){var s=r.slice(o);this._observeEvent(s,n)}},r.StringGenerator.prototype.getStats=function(){var t=[],e=0;for(var i in this._priorValues)e++;e--,t.push("distinct samples: "+e);var r=0,n=0;for(var i in this._data){r++;for(var o in this._data[i])n++}return t.push("dictionary size (contexts): "+r),t.push("dictionary size (events): "+n),t.join(", ")},r.StringGenerator.prototype._split=function(t){return t.split(this._options.words?/\s+/:"")},r.StringGenerator.prototype._join=function(t){return t.join(this._options.words?" ":"")},r.StringGenerator.prototype._observeEvent=function(t,e){var i=this._join(t);i in this._data||(this._data[i]={});var r=this._data[i];e in r||(r[e]=0),r[e]++},r.StringGenerator.prototype._sample=function(t){t=this._backoff(t);var e=this._join(t),i=this._data[e],n={};if(this._options.prior){for(var o in this._priorValues)n[o]=this._priorValues[o];for(var o in i)n[o]+=i[o]}else n=i;return r.RNG.getWeightedValue(n)},r.StringGenerator.prototype._backoff=function(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t},r.EventQueue=function(){this._time=0,this._events=[],this._eventTimes=[]},r.EventQueue.prototype.getTime=function(){return this._time},r.EventQueue.prototype.clear=function(){return this._events=[],this._eventTimes=[],this},r.EventQueue.prototype.add=function(t,e){for(var i=this._events.length,r=0;r<this._eventTimes.length;r++)if(this._eventTimes[r]>e){i=r;break}this._events.splice(i,0,t),this._eventTimes.splice(i,0,e)},r.EventQueue.prototype.get=function(){if(!this._events.length)return null;var t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(var e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]},r.EventQueue.prototype.remove=function(t){var e=this._events.indexOf(t);return e!=-1&&(this._remove(e),!0)},r.EventQueue.prototype._remove=function(t){this._events.splice(t,1),this._eventTimes.splice(t,1)},r.Scheduler=function(){this._queue=new r.EventQueue,this._repeat=[],this._current=null},r.Scheduler.prototype.getTime=function(){return this._queue.getTime()},r.Scheduler.prototype.add=function(t,e){return e&&this._repeat.push(t),this},r.Scheduler.prototype.clear=function(){return this._queue.clear(),this._repeat=[],this._current=null,this},r.Scheduler.prototype.remove=function(t){var e=this._queue.remove(t),i=this._repeat.indexOf(t);return i!=-1&&this._repeat.splice(i,1),this._current==t&&(this._current=null),e},r.Scheduler.prototype.next=function(){return this._current=this._queue.get(),this._current},r.Scheduler.Simple=function(){r.Scheduler.call(this)},r.Scheduler.Simple.extend(r.Scheduler),r.Scheduler.Simple.prototype.add=function(t,e){return this._queue.add(t,0),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Simple.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&this._queue.add(this._current,0),r.Scheduler.prototype.next.call(this)},r.Scheduler.Speed=function(){r.Scheduler.call(this)},r.Scheduler.Speed.extend(r.Scheduler),r.Scheduler.Speed.prototype.add=function(t,e){return this._queue.add(t,1/t.getSpeed()),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Speed.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&this._queue.add(this._current,1/this._current.getSpeed()),r.Scheduler.prototype.next.call(this)},r.Scheduler.Action=function(){r.Scheduler.call(this),this._defaultDuration=1,this._duration=this._defaultDuration},r.Scheduler.Action.extend(r.Scheduler),r.Scheduler.Action.prototype.add=function(t,e,i){return this._queue.add(t,i||this._defaultDuration),r.Scheduler.prototype.add.call(this,t,e)},r.Scheduler.Action.prototype.clear=function(){return this._duration=this._defaultDuration,r.Scheduler.prototype.clear.call(this)},r.Scheduler.Action.prototype.remove=function(t){return t==this._current&&(this._duration=this._defaultDuration),r.Scheduler.prototype.remove.call(this,t)},r.Scheduler.Action.prototype.next=function(){return this._current&&this._repeat.indexOf(this._current)!=-1&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),r.Scheduler.prototype.next.call(this)},r.Scheduler.Action.prototype.setDuration=function(t){return this._current&&(this._duration=t),this},r.Engine=function(t){this._scheduler=t,this._lock=1},r.Engine.prototype.start=function(){return this.unlock()},r.Engine.prototype.lock=function(){return this._lock++,this},r.Engine.prototype.unlock=function(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){var t=this._scheduler.next();if(!t)return this.lock();var e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this},r.Map=function(t,e){this._width=t||r.DEFAULT_WIDTH,this._height=e||r.DEFAULT_HEIGHT},r.Map.prototype.create=function(t){},r.Map.prototype._fillMap=function(t){for(var e=[],i=0;i<this._width;i++){e.push([]);for(var r=0;r<this._height;r++)e[i].push(t)}return e},r.Map.Arena=function(t,e){r.Map.call(this,t,e)},r.Map.Arena.extend(r.Map),r.Map.Arena.prototype.create=function(t){for(var e=this._width-1,i=this._height-1,r=0;r<=e;r++)for(var n=0;n<=i;n++){var o=r&&n&&r<e&&n<i;t(r,n,o?0:1)}return this},r.Map.DividedMaze=function(t,e){r.Map.call(this,t,e),this._stack=[]},r.Map.DividedMaze.extend(r.Map),r.Map.DividedMaze.prototype.create=function(t){var e=this._width,i=this._height;this._map=[];for(var r=0;r<e;r++){this._map.push([]);for(var n=0;n<i;n++){var o=0==r||0==n||r+1==e||n+1==i;this._map[r].push(o?1:0)}}this._stack=[[1,1,e-2,i-2]],this._process();for(var r=0;r<e;r++)for(var n=0;n<i;n++)t(r,n,this._map[r][n]);return this._map=null,this},r.Map.DividedMaze.prototype._process=function(){for(;this._stack.length;){var t=this._stack.shift();this._partitionRoom(t)}},r.Map.DividedMaze.prototype._partitionRoom=function(t){for(var e=[],i=[],r=t[0]+1;r<t[2];r++){var n=this._map[r][t[1]-1],o=this._map[r][t[3]+1];!n||!o||r%2||e.push(r)}for(var s=t[1]+1;s<t[3];s++){var a=this._map[t[0]-1][s],h=this._map[t[2]+1][s];!a||!h||s%2||i.push(s)}if(e.length&&i.length){var l=e.random(),c=i.random();this._map[l][c]=1;var u=[],p=[];u.push(p);for(var r=t[0];r<l;r++)this._map[r][c]=1,p.push([r,c]);var p=[];u.push(p);for(var r=l+1;r<=t[2];r++)this._map[r][c]=1,p.push([r,c]);var p=[];u.push(p);for(var s=t[1];s<c;s++)this._map[l][s]=1,p.push([l,s]);var p=[];u.push(p);for(var s=c+1;s<=t[3];s++)this._map[l][s]=1,p.push([l,s]);for(var _=u.random(),r=0;r<u.length;r++){var p=u[r];if(p!=_){var f=p.random();this._map[f[0]][f[1]]=0}}this._stack.push([t[0],t[1],l-1,c-1]),this._stack.push([l+1,t[1],t[2],c-1]),this._stack.push([t[0],c+1,l-1,t[3]]),this._stack.push([l+1,c+1,t[2],t[3]])}},r.Map.IceyMaze=function(t,e,i){r.Map.call(this,t,e),this._regularity=i||0},r.Map.IceyMaze.extend(r.Map),r.Map.IceyMaze.prototype.create=function(t){var e=this._width,i=this._height,n=this._fillMap(1);e-=e%2?1:2,i-=i%2?1:2;var o=0,s=0,a=0,h=0,l=0,c=!1,u=[[0,0],[0,0],[0,0],[0,0]];do if(o=1+2*Math.floor(r.RNG.getUniform()*(e-1)/2),s=1+2*Math.floor(r.RNG.getUniform()*(i-1)/2),l||(n[o][s]=0),!n[o][s]){this._randomize(u);do{0==Math.floor(r.RNG.getUniform()*(this._regularity+1))&&this._randomize(u),c=!0;for(var p=0;p<4;p++)if(a=o+2*u[p][0],h=s+2*u[p][1],this._isFree(n,a,h,e,i)){n[a][h]=0,n[o+u[p][0]][s+u[p][1]]=0,o=a,s=h,c=!1,l++;break}}while(!c)}while(l+1<e*i/4);for(var p=0;p<this._width;p++)for(var _=0;_<this._height;_++)t(p,_,n[p][_]);return this._map=null,this},r.Map.IceyMaze.prototype._randomize=function(t){for(var e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.RNG.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}},r.Map.IceyMaze.prototype._isFree=function(t,e,i,r,n){return!(e<1||i<1||e>=r||i>=n)&&t[e][i]},r.Map.EllerMaze=function(t,e){r.Map.call(this,t,e)},r.Map.EllerMaze.extend(r.Map),r.Map.EllerMaze.prototype.create=function(t){for(var e=this._fillMap(1),i=Math.ceil((this._width-2)/2),n=.375,o=[],s=[],a=0;a<i;a++)o.push(a),s.push(a);o.push(i-1);for(var h=1;h+3<this._height;h+=2)for(var a=0;a<i;a++){var l=2*a+1,c=h;e[l][c]=0,a!=o[a+1]&&r.RNG.getUniform()>n&&(this._addToList(a,o,s),e[l+1][c]=0),a!=o[a]&&r.RNG.getUniform()>n?this._removeFromList(a,o,s):e[l][c+1]=0}for(var a=0;a<i;a++){var l=2*a+1,c=h;e[l][c]=0,a!=o[a+1]&&(a==o[a]||r.RNG.getUniform()>n)&&(this._addToList(a,o,s),e[l+1][c]=0),this._removeFromList(a,o,s)}for(var a=0;a<this._width;a++)for(var h=0;h<this._height;h++)t(a,h,e[a][h]);return this},r.Map.EllerMaze.prototype._removeFromList=function(t,e,i){i[e[t]]=i[t],e[i[t]]=e[t],i[t]=t,e[t]=t},r.Map.EllerMaze.prototype._addToList=function(t,e,i){i[e[t+1]]=i[t],e[i[t]]=e[t+1],i[t]=t+1,e[t+1]=t},r.Map.Cellular=function(t,e,i){r.Map.call(this,t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8,connected:!1},this.setOptions(i),this._dirs=r.DIRS[this._options.topology],this._map=this._fillMap(0)},r.Map.Cellular.extend(r.Map),r.Map.Cellular.prototype.randomize=function(t){for(var e=0;e<this._width;e++)for(var i=0;i<this._height;i++)this._map[e][i]=r.RNG.getUniform()<t?1:0;return this},r.Map.Cellular.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e]},r.Map.Cellular.prototype.set=function(t,e,i){this._map[t][e]=i},r.Map.Cellular.prototype.create=function(t){for(var e=this._fillMap(0),i=this._options.born,r=this._options.survive,n=0;n<this._height;n++){var o=1,s=0;6==this._options.topology&&(o=2,s=n%2);for(var a=s;a<this._width;a+=o){var h=this._map[a][n],l=this._getNeighbors(a,n);h&&r.indexOf(l)!=-1?e[a][n]=1:h||i.indexOf(l)==-1||(e[a][n]=1)}}if(this._map=e,this._options.connected&&this._completeMaze(),t)for(var n=0;n<this._height;n++){var o=1,s=0;6==this._options.topology&&(o=2,s=n%2);for(var a=s;a<this._width;a+=o)t(a,n,e[a][n])}},r.Map.Cellular.prototype._getNeighbors=function(t,e){for(var i=0,r=0;r<this._dirs.length;r++){var n=this._dirs[r],o=t+n[0],s=e+n[1];o<0||o>=this._width||o<0||s>=this._width||(i+=1==this._map[o][s]?1:0);
}return i},r.Map.Cellular.prototype._completeMaze=function(){for(var t=[],e={},i=0;i<this._width;i++)for(var n=0;n<this._height;n++)if(this._freeSpace(i,n)){var o=[i,n];e[this._pointKey(o)]=o,t.push([i,n])}var s=t[r.RNG.getUniformInt(0,t.length-1)],a=this._pointKey(s),h={};for(h[a]=s,delete e[a],this._findConnected(h,e,[s]);Object.keys(e).length>0;){var o=this._getFromTo(h,e),l=o[0],c=o[1],u={};u[this._pointKey(l)]=l,this._findConnected(u,e,[l],!0),this._tunnelToConnected(c,l,h,e);for(var p in u){var _=u[p];this._map[_[0]][_[1]]=0,h[p]=_,delete e[p]}}},r.Map.Cellular.prototype._getFromTo=function(t,e){for(var i,n,o,s=Object.keys(t),a=Object.keys(e),h=0;h<5;h++){if(s.length<a.length){var l=s;n=t[l[r.RNG.getUniformInt(0,l.length-1)]],i=this._getClosest(n,e)}else{var l=a;i=e[l[r.RNG.getUniformInt(0,l.length-1)]],n=this._getClosest(i,t)}if(o=(i[0]-n[0])*(i[0]-n[0])+(i[1]-n[1])*(i[1]-n[1]),o<64)break}return[i,n]},r.Map.Cellular.prototype._getClosest=function(t,e){var i=null,r=null;for(k in e){var n=e[k],o=(n[0]-t[0])*(n[0]-t[0])+(n[1]-t[1])*(n[1]-t[1]);(null==r||o<r)&&(r=o,i=n)}return i},r.Map.Cellular.prototype._findConnected=function(t,e,i,r){for(;i.length>0;)for(var n=i.splice(0,1)[0],o=[[n[0]+1,n[1]],[n[0]-1,n[1]],[n[0],n[1]+1],[n[0],n[1]-1]],s=0;s<o.length;s++){var a=this._pointKey(o[s]);null==t[a]&&this._freeSpace(o[s][0],o[s][1])&&(t[a]=o[s],r||delete e[a],i.push(o[s]))}},r.Map.Cellular.prototype._tunnelToConnected=function(t,e,i,r){var n,o;this._pointKey(e);e[0]<t[0]?(n=e,o=t):(n=t,o=e);for(var s=n[0];s<=o[0];s++){this._map[s][n[1]]=0;var a=[s,n[1]],h=this._pointKey(a);i[h]=a,delete r[h]}var l=o[0];e[1]<t[1]?(n=e,o=t):(n=t,o=e);for(var c=n[1];c<o[1];c++){this._map[l][c]=0;var a=[l,c],h=this._pointKey(a);i[h]=a,delete r[h]}},r.Map.Cellular.prototype._freeSpace=function(t,e){return t>=0&&t<this._width&&e>=0&&e<this._height&&1!=this._map[t][e]},r.Map.Cellular.prototype._pointKey=function(t){return t[0]+"."+t[1]},r.Map.Dungeon=function(t,e){r.Map.call(this,t,e),this._rooms=[],this._corridors=[]},r.Map.Dungeon.extend(r.Map),r.Map.Dungeon.prototype.getRooms=function(){return this._rooms},r.Map.Dungeon.prototype.getCorridors=function(){return this._corridors},r.Map.Digger=function(t,e,i){r.Map.Dungeon.call(this,t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3};for(var n in i)this._options[n]=i[n];this._features={Room:4,Corridor:4},this._featureAttempts=20,this._walls={},this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)},r.Map.Digger.extend(r.Map.Dungeon),r.Map.Digger.prototype.create=function(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;var e=(this._width-2)*(this._height-2);this._firstRoom();var i=Date.now();do{var r=Date.now();if(r-i>this._options.timeLimit)break;var n=this._findWall();if(!n)break;var o=n.split(","),s=parseInt(o[0]),a=parseInt(o[1]),h=this._getDiggingDirection(s,a);if(h){var l=0;do if(l++,this._tryFeature(s,a,h[0],h[1])){this._removeSurroundingWalls(s,a),this._removeSurroundingWalls(s-h[0],a-h[1]);break}while(l<this._featureAttempts);var c=0;for(var u in this._walls)this._walls[u]>1&&c++}}while(this._dug/e<this._options.dugPercentage||c);if(this._addDoors(),t)for(var p=0;p<this._width;p++)for(var _=0;_<this._height;_++)t(p,_,this._map[p][_]);return this._walls={},this._map=null,this},r.Map.Digger.prototype._digCallback=function(t,e,i){0==i||2==i?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1},r.Map.Digger.prototype._isWallCallback=function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]},r.Map.Digger.prototype._canBeDugCallback=function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]},r.Map.Digger.prototype._priorityWallCallback=function(t,e){this._walls[t+","+e]=2},r.Map.Digger.prototype._firstRoom=function(){var t=Math.floor(this._width/2),e=Math.floor(this._height/2),i=r.Map.Feature.Room.createRandomCenter(t,e,this._options);this._rooms.push(i),i.create(this._digCallback)},r.Map.Digger.prototype._findWall=function(){var t=[],e=[];for(var i in this._walls){var r=this._walls[i];2==r?e.push(i):t.push(i)}var n=e.length?e:t;if(!n.length)return null;var i=n.random();return delete this._walls[i],i},r.Map.Digger.prototype._tryFeature=function(t,e,i,n){var o=r.RNG.getWeightedValue(this._features);return o=r.Map.Feature[o].createRandomAt(t,e,i,n,this._options),!!o.isValid(this._isWallCallback,this._canBeDugCallback)&&(o.create(this._digCallback),o instanceof r.Map.Feature.Room&&this._rooms.push(o),o instanceof r.Map.Feature.Corridor&&(o.createPriorityWalls(this._priorityWallCallback),this._corridors.push(o)),!0)},r.Map.Digger.prototype._removeSurroundingWalls=function(t,e){for(var i=r.DIRS[4],n=0;n<i.length;n++){var o=i[n],s=t+o[0],a=e+o[1];delete this._walls[s+","+a];var s=t+2*o[0],a=e+2*o[1];delete this._walls[s+","+a]}},r.Map.Digger.prototype._getDiggingDirection=function(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;for(var i=null,n=r.DIRS[4],o=0;o<n.length;o++){var s=n[o],a=t+s[0],h=e+s[1];if(!this._map[a][h]){if(i)return null;i=s}}return i?[-i[0],-i[1]]:null},r.Map.Digger.prototype._addDoors=function(){for(var t=this._map,e=function(e,i){return 1==t[e][i]},i=0;i<this._rooms.length;i++){var r=this._rooms[i];r.clearDoors(),r.addDoors(e)}},r.Map.Uniform=function(t,e,i){r.Map.Dungeon.call(this,t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3};for(var n in i)this._options[n]=i[n];this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)},r.Map.Uniform.extend(r.Map.Dungeon),r.Map.Uniform.prototype.create=function(t){for(var e=Date.now();;){var i=Date.now();if(i-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(var r=0;r<this._width;r++)for(var n=0;n<this._height;n++)t(r,n,this._map[r][n]);return this},r.Map.Uniform.prototype._generateRooms=function(){var t=this._width-2,e=this._height-2;do{var i=this._generateRoom();if(this._dug/(t*e)>this._options.roomDugPercentage)break}while(i)},r.Map.Uniform.prototype._generateRoom=function(){for(var t=0;t<this._roomAttempts;){t++;var e=r.Map.Feature.Room.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null},r.Map.Uniform.prototype._generateCorridors=function(){for(var t=0;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(var e=0;e<this._rooms.length;e++){var i=this._rooms[e];i.clearDoors(),i.create(this._digCallback)}for(this._unconnected=this._rooms.slice().randomize(),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){var r=this._connected.random(),n=this._closestRoom(this._unconnected,r),o=this._closestRoom(this._connected,n),s=this._connectRooms(n,o);if(!s)break;if(!this._unconnected.length)return!0}}return!1},r.Map.Uniform.prototype._closestRoom=function(t,e){for(var i=1/0,r=e.getCenter(),n=null,o=0;o<t.length;o++){var s=t[o],a=s.getCenter(),h=a[0]-r[0],l=a[1]-r[1],c=h*h+l*l;c<i&&(i=c,n=s)}return n},r.Map.Uniform.prototype._connectRooms=function(t,e){var i=t.getCenter(),r=e.getCenter(),n=r[0]-i[0],o=r[1]-i[1];if(Math.abs(n)<Math.abs(o))var s=o>0?2:0,a=(s+2)%4,h=e.getLeft(),l=e.getRight(),c=0;else var s=n>0?1:3,a=(s+2)%4,h=e.getTop(),l=e.getBottom(),c=1;var u=this._placeInWall(t,s);if(!u)return!1;if(u[c]>=h&&u[c]<=l){var p=u.slice(),_=null;switch(a){case 0:_=e.getTop()-1;break;case 1:_=e.getRight()+1;break;case 2:_=e.getBottom()+1;break;case 3:_=e.getLeft()-1}p[(c+1)%2]=_,this._digLine([u,p])}else if(u[c]<h-1||u[c]>l+1){var f=u[c]-r[c];switch(a){case 0:case 1:var d=f<0?3:1;break;case 2:case 3:var d=f<0?1:3}a=(a+d)%4;var p=this._placeInWall(e,a);if(!p)return!1;var g=[0,0];g[c]=u[c];var m=(c+1)%2;g[m]=p[m],this._digLine([u,g,p])}else{var m=(c+1)%2,p=this._placeInWall(e,a);if(!p)return!1;var g=Math.round((p[m]+u[m])/2),v=[0,0],y=[0,0];v[c]=u[c],v[m]=g,y[c]=p[c],y[m]=g,this._digLine([u,v,y,p])}t.addDoor(u[0],u[1]),e.addDoor(p[0],p[1]);var c=this._unconnected.indexOf(t);c!=-1&&(this._unconnected.splice(c,1),this._connected.push(t));var c=this._unconnected.indexOf(e);return c!=-1&&(this._unconnected.splice(c,1),this._connected.push(e)),!0},r.Map.Uniform.prototype._placeInWall=function(t,e){var i=[0,0],r=[0,0],n=0;switch(e){case 0:r=[1,0],i=[t.getLeft(),t.getTop()-1],n=t.getRight()-t.getLeft()+1;break;case 1:r=[0,1],i=[t.getRight()+1,t.getTop()],n=t.getBottom()-t.getTop()+1;break;case 2:r=[1,0],i=[t.getLeft(),t.getBottom()+1],n=t.getRight()-t.getLeft()+1;break;case 3:r=[0,1],i=[t.getLeft()-1,t.getTop()],n=t.getBottom()-t.getTop()+1}for(var o=[],s=-2,a=0;a<n;a++){var h=i[0]+a*r[0],l=i[1]+a*r[1];o.push(null);var c=1==this._map[h][l];c?s!=a-1&&(o[a]=[h,l]):(s=a,a&&(o[a-1]=null))}for(var a=o.length-1;a>=0;a--)o[a]||o.splice(a,1);return o.length?o.random():null},r.Map.Uniform.prototype._digLine=function(t){for(var e=1;e<t.length;e++){var i=t[e-1],n=t[e],o=new r.Map.Feature.Corridor(i[0],i[1],n[0],n[1]);o.create(this._digCallback),this._corridors.push(o)}},r.Map.Uniform.prototype._digCallback=function(t,e,i){this._map[t][e]=i,0==i&&this._dug++},r.Map.Uniform.prototype._isWallCallback=function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]},r.Map.Uniform.prototype._canBeDugCallback=function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]},r.Map.Rogue=function(t,e,i){r.Map.call(this,t,e),this._options={cellWidth:3,cellHeight:3};for(var n in i)this._options[n]=i[n];this._options.hasOwnProperty("roomWidth")||(this._options.roomWidth=this._calculateRoomSize(this._width,this._options.cellWidth)),this._options.hasOwnProperty("roomHeight")||(this._options.roomHeight=this._calculateRoomSize(this._height,this._options.cellHeight))},r.Map.Rogue.extend(r.Map),r.Map.Rogue.prototype.create=function(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(var e=0;e<this._width;e++)for(var i=0;i<this._height;i++)t(e,i,this.map[e][i]);return this},r.Map.Rogue.prototype._calculateRoomSize=function(t,e){var i=Math.floor(t/e*.8),r=Math.floor(t/e*.25);return r<2&&(r=2),i<2&&(i=2),[r,i]},r.Map.Rogue.prototype._initRooms=function(){for(var t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(var e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}},r.Map.Rogue.prototype._connectRooms=function(){var t,e,i,n,o,s=r.RNG.getUniformInt(0,this._options.cellWidth-1),a=r.RNG.getUniformInt(0,this._options.cellHeight-1),h=!1;do{var l=[0,2,4,6];l=l.randomize();do if(h=!1,t=l.pop(),e=s+r.DIRS[8][t][0],i=a+r.DIRS[8][t][1],!(e<0||e>=this._options.cellWidth||i<0||i>=this._options.cellHeight)){if(n=this.rooms[s][a],n.connections.length>0&&n.connections[0][0]==e&&n.connections[0][1]==i)break;o=this.rooms[e][i],0==o.connections.length&&(o.connections.push([s,a]),this.connectedCells.push([e,i]),s=e,a=i,h=!0)}while(l.length>0&&0==h)}while(l.length>0)},r.Map.Rogue.prototype._connectUnconnectedRooms=function(){var t=this._options.cellWidth,e=this._options.cellHeight;this.connectedCells=this.connectedCells.randomize();for(var i,n,o,s=0;s<this._options.cellWidth;s++)for(var a=0;a<this._options.cellHeight;a++)if(i=this.rooms[s][a],0==i.connections.length){var h=[0,2,4,6];h=h.randomize();var o=!1;do{var l=h.pop(),c=s+r.DIRS[8][l][0],u=a+r.DIRS[8][l][1];if(!(c<0||c>=t||u<0||u>=e)){if(n=this.rooms[c][u],o=!0,0==n.connections.length)break;for(var p=0;p<n.connections.length;p++)if(n.connections[p][0]==s&&n.connections[p][1]==a){o=!1;break}if(o)break}}while(h.length);o?i.connections.push([n.cellx,n.celly]):console.log("-- Unable to connect room.")}},r.Map.Rogue.prototype._createRandomRoomConnections=function(t){},r.Map.Rogue.prototype._createRooms=function(){for(var t,e,i,n,o,s=this._width,a=this._height,h=this._options.cellWidth,l=this._options.cellHeight,c=Math.floor(this._width/h),u=Math.floor(this._height/l),p=this._options.roomWidth,_=this._options.roomHeight,f=0;f<h;f++)for(var d=0;d<l;d++){if(i=c*f,n=u*d,0==i&&(i=1),0==n&&(n=1),t=r.RNG.getUniformInt(p[0],p[1]),e=r.RNG.getUniformInt(_[0],_[1]),d>0)for(o=this.rooms[f][d-1];n-(o.y+o.height)<3;)n++;if(f>0)for(o=this.rooms[f-1][d];i-(o.x+o.width)<3;)i++;for(var g=Math.round(r.RNG.getUniformInt(0,c-t)/2),m=Math.round(r.RNG.getUniformInt(0,u-e)/2);i+g+t>=s;)g?g--:t--;for(;n+m+e>=a;)m?m--:e--;i+=g,n+=m,this.rooms[f][d].x=i,this.rooms[f][d].y=n,this.rooms[f][d].width=t,this.rooms[f][d].height=e;for(var v=i;v<i+t;v++)for(var y=n;y<n+e;y++)this.map[v][y]=0}},r.Map.Rogue.prototype._getWallPosition=function(t,e){var i,n,o;return 1==e||3==e?(i=r.RNG.getUniformInt(t.x+1,t.x+t.width-2),1==e?(n=t.y-2,o=n+1):(n=t.y+t.height+1,o=n-1),this.map[i][o]=0):2!=e&&4!=e||(n=r.RNG.getUniformInt(t.y+1,t.y+t.height-2),2==e?(i=t.x+t.width+1,o=i-1):(i=t.x-2,o=i+1),this.map[o][n]=0),[i,n]},r.Map.Rogue.prototype._drawCorridore=function(t,e){var i,n,o,s,a=e[0]-t[0],h=e[1]-t[1],l=t[0],c=t[1],u=[],p=Math.abs(a),_=Math.abs(h),f=r.RNG.getUniform(),d=f,g=1-f;for(n=a>0?2:6,o=h>0?4:0,p<_?(i=Math.ceil(_*d),u.push([o,i]),u.push([n,p]),i=Math.floor(_*g),u.push([o,i])):(i=Math.ceil(p*d),u.push([n,i]),u.push([o,_]),i=Math.floor(p*g),u.push([n,i])),this.map[l][c]=0;u.length>0;)for(s=u.pop();s[1]>0;)l+=r.DIRS[8][s[0]][0],c+=r.DIRS[8][s[0]][1],this.map[l][c]=0,s[1]=s[1]-1},r.Map.Rogue.prototype._createCorridors=function(){for(var t,e,i,r,n,o=this._options.cellWidth,s=this._options.cellHeight,a=0;a<o;a++)for(var h=0;h<s;h++){t=this.rooms[a][h];for(var l=0;l<t.connections.length;l++)e=t.connections[l],i=this.rooms[e[0]][e[1]],i.cellx>t.cellx?(r=2,n=4):i.cellx<t.cellx?(r=4,n=2):i.celly>t.celly?(r=3,n=1):i.celly<t.celly&&(r=1,n=3),this._drawCorridore(this._getWallPosition(t,r),this._getWallPosition(i,n))}},r.Map.Feature=function(){},r.Map.Feature.prototype.isValid=function(t){},r.Map.Feature.prototype.create=function(t){},r.Map.Feature.prototype.debug=function(){},r.Map.Feature.createRandomAt=function(t,e,i,r,n){},r.Map.Feature.Room=function(t,e,i,r,n,o){this._x1=t,this._y1=e,this._x2=i,this._y2=r,this._doors={},arguments.length>4&&this.addDoor(n,o)},r.Map.Feature.Room.extend(r.Map.Feature),r.Map.Feature.Room.createRandomAt=function(t,e,i,n,o){var s=o.roomWidth[0],a=o.roomWidth[1],h=r.RNG.getUniformInt(s,a),s=o.roomHeight[0],a=o.roomHeight[1],l=r.RNG.getUniformInt(s,a);if(1==i){var c=e-Math.floor(r.RNG.getUniform()*l);return new this(t+1,c,t+h,c+l-1,t,e)}if(i==-1){var c=e-Math.floor(r.RNG.getUniform()*l);return new this(t-h,c,t-1,c+l-1,t,e)}if(1==n){var u=t-Math.floor(r.RNG.getUniform()*h);return new this(u,e+1,u+h-1,e+l,t,e)}if(n==-1){var u=t-Math.floor(r.RNG.getUniform()*h);return new this(u,e-l,u+h-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")},r.Map.Feature.Room.createRandomCenter=function(t,e,i){var n=i.roomWidth[0],o=i.roomWidth[1],s=r.RNG.getUniformInt(n,o),n=i.roomHeight[0],o=i.roomHeight[1],a=r.RNG.getUniformInt(n,o),h=t-Math.floor(r.RNG.getUniform()*s),l=e-Math.floor(r.RNG.getUniform()*a),c=h+s-1,u=l+a-1;return new this(h,l,c,u)},r.Map.Feature.Room.createRandom=function(t,e,i){var n=i.roomWidth[0],o=i.roomWidth[1],s=r.RNG.getUniformInt(n,o),n=i.roomHeight[0],o=i.roomHeight[1],a=r.RNG.getUniformInt(n,o),h=t-s-1,l=e-a-1,c=1+Math.floor(r.RNG.getUniform()*h),u=1+Math.floor(r.RNG.getUniform()*l),p=c+s-1,_=u+a-1;return new this(c,u,p,_)},r.Map.Feature.Room.prototype.addDoor=function(t,e){return this._doors[t+","+e]=1,this},r.Map.Feature.Room.prototype.getDoors=function(t){for(var e in this._doors){var i=e.split(",");t(parseInt(i[0]),parseInt(i[1]))}return this},r.Map.Feature.Room.prototype.clearDoors=function(){return this._doors={},this},r.Map.Feature.Room.prototype.addDoors=function(t){for(var e=this._x1-1,i=this._x2+1,r=this._y1-1,n=this._y2+1,o=e;o<=i;o++)for(var s=r;s<=n;s++)o!=e&&o!=i&&s!=r&&s!=n||t(o,s)||this.addDoor(o,s);return this},r.Map.Feature.Room.prototype.debug=function(){console.log("room",this._x1,this._y1,this._x2,this._y2)},r.Map.Feature.Room.prototype.isValid=function(t,e){for(var i=this._x1-1,r=this._x2+1,n=this._y1-1,o=this._y2+1,s=i;s<=r;s++)for(var a=n;a<=o;a++)if(s==i||s==r||a==n||a==o){if(!t(s,a))return!1}else if(!e(s,a))return!1;return!0},r.Map.Feature.Room.prototype.create=function(t){for(var e=this._x1-1,i=this._x2+1,r=this._y1-1,n=this._y2+1,o=0,s=e;s<=i;s++)for(var a=r;a<=n;a++)o=s+","+a in this._doors?2:s==e||s==i||a==r||a==n?1:0,t(s,a,o)},r.Map.Feature.Room.prototype.getCenter=function(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]},r.Map.Feature.Room.prototype.getLeft=function(){return this._x1},r.Map.Feature.Room.prototype.getRight=function(){return this._x2},r.Map.Feature.Room.prototype.getTop=function(){return this._y1},r.Map.Feature.Room.prototype.getBottom=function(){return this._y2},r.Map.Feature.Corridor=function(t,e,i,r){this._startX=t,this._startY=e,this._endX=i,this._endY=r,this._endsWithAWall=!0},r.Map.Feature.Corridor.extend(r.Map.Feature),r.Map.Feature.Corridor.createRandomAt=function(t,e,i,n,o){var s=o.corridorLength[0],a=o.corridorLength[1],h=r.RNG.getUniformInt(s,a);return new this(t,e,t+i*h,e+n*h)},r.Map.Feature.Corridor.prototype.debug=function(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)},r.Map.Feature.Corridor.prototype.isValid=function(t,e){var i=this._startX,r=this._startY,n=this._endX-i,o=this._endY-r,s=1+Math.max(Math.abs(n),Math.abs(o));n&&(n/=Math.abs(n)),o&&(o/=Math.abs(o));for(var a=o,h=-n,l=!0,c=0;c<s;c++){var u=i+c*n,p=r+c*o;if(e(u,p)||(l=!1),t(u+a,p+h)||(l=!1),t(u-a,p-h)||(l=!1),!l){s=c,this._endX=u-n,this._endY=p-o;break}}if(0==s)return!1;if(1==s&&t(this._endX+n,this._endY+o))return!1;var _=!t(this._endX+n+a,this._endY+o+h),f=!t(this._endX+n-a,this._endY+o-h);return this._endsWithAWall=t(this._endX+n,this._endY+o),!_&&!f||!this._endsWithAWall},r.Map.Feature.Corridor.prototype.create=function(t){var e=this._startX,i=this._startY,r=this._endX-e,n=this._endY-i,o=1+Math.max(Math.abs(r),Math.abs(n));r&&(r/=Math.abs(r)),n&&(n/=Math.abs(n));for(var s=0;s<o;s++){var a=e+s*r,h=i+s*n;t(a,h,0)}return!0},r.Map.Feature.Corridor.prototype.createPriorityWalls=function(t){if(this._endsWithAWall){var e=this._startX,i=this._startY,r=this._endX-e,n=this._endY-i;r&&(r/=Math.abs(r)),n&&(n/=Math.abs(n));var o=n,s=-r;t(this._endX+r,this._endY+n),t(this._endX+o,this._endY+s),t(this._endX-o,this._endY-s)}},r.Noise=function(){},r.Noise.prototype.get=function(t,e){},r.Noise.Simplex=function(t){r.Noise.call(this),this._F2=.5*(Math.sqrt(3)-1),this._G2=(3-Math.sqrt(3))/6,this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];for(var e=[],i=t||256,n=0;n<i;n++)e.push(n);e=e.randomize(),this._perms=[],this._indexes=[];for(var n=0;n<2*i;n++)this._perms.push(e[n%i]),this._indexes.push(this._perms[n]%this._gradients.length)},r.Noise.Simplex.extend(r.Noise),r.Noise.Simplex.prototype.get=function(t,e){var i,r,n,o=this._perms,s=this._indexes,a=o.length/2,h=this._G2,l=0,c=0,u=0,p=(t+e)*this._F2,_=Math.floor(t+p),f=Math.floor(e+p),d=(_+f)*h,g=_-d,m=f-d,v=t-g,y=e-m;v>y?(r=1,n=0):(r=0,n=1);var M=v-r+h,b=y-n+h,w=v-1+2*h,x=y-1+2*h,S=_.mod(a),T=f.mod(a),k=.5-v*v-y*y;if(k>=0){k*=k,i=s[S+o[T]];var R=this._gradients[i];l=k*k*(R[0]*v+R[1]*y)}var C=.5-M*M-b*b;if(C>=0){C*=C,i=s[S+r+o[T+n]];var R=this._gradients[i];c=C*C*(R[0]*M+R[1]*b)}var D=.5-w*w-x*x;if(D>=0){D*=D,i=s[S+1+o[T+1]];var R=this._gradients[i];u=D*D*(R[0]*w+R[1]*x)}return 70*(l+c+u)},r.FOV=function(t,e){this._lightPasses=t,this._options={topology:8};for(var i in e)this._options[i]=e[i]},r.FOV.prototype.compute=function(t,e,i,r){},r.FOV.prototype._getCircle=function(t,e,i){var n,o,s,a=[];switch(this._options.topology){case 4:o=1,s=[0,1],n=[r.DIRS[8][7],r.DIRS[8][1],r.DIRS[8][3],r.DIRS[8][5]];break;case 6:n=r.DIRS[6],o=1,s=[-1,1];break;case 8:n=r.DIRS[4],o=2,s=[-1,1]}for(var h=t+s[0]*i,l=e+s[1]*i,c=0;c<n.length;c++)for(var u=0;u<i*o;u++)a.push([h,l]),h+=n[c][0],l+=n[c][1];return a},r.FOV.DiscreteShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.DiscreteShadowcasting.extend(r.FOV),r.FOV.DiscreteShadowcasting.prototype.compute=function(t,e,i,r){this._coords,this._map;if(r(t,e,0,1),this._lightPasses(t,e))for(var n,o,s,a,h,l=[],c=1;c<=i;c++)for(var u=this._getCircle(t,e,c),p=360/u.length,_=0;_<u.length;_++)if(s=u[_][0],a=u[_][1],n=p*(_-.5),o=n+p,h=!this._lightPasses(s,a),this._visibleCoords(Math.floor(n),Math.ceil(o),h,l)&&r(s,a,c,1),2==l.length&&0==l[0]&&360==l[1])return},r.FOV.DiscreteShadowcasting.prototype._visibleCoords=function(t,e,i,r){if(t<0){var n=arguments.callee(0,e,i,r),o=arguments.callee(360+t,360,i,r);return n||o}for(var s=0;s<r.length&&r[s]<t;)s++;if(s==r.length)return i&&r.push(t,e),!0;var a=0;if(s%2){for(;s<r.length&&r[s]<e;)s++,a++;return 0!=a&&(i&&(a%2?r.splice(s-a,a,e):r.splice(s-a,a)),!0)}for(;s<r.length&&r[s]<e;)s++,a++;return(t!=r[s-a]||1!=a)&&(i&&(a%2?r.splice(s-a,a,t):r.splice(s-a,a,t,e)),!0)},r.FOV.PreciseShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.PreciseShadowcasting.extend(r.FOV),r.FOV.PreciseShadowcasting.prototype.compute=function(t,e,i,r){if(r(t,e,0,1),this._lightPasses(t,e))for(var n,o,s,a,h,l,c=[],u=1;u<=i;u++)for(var p=this._getCircle(t,e,u),_=p.length,f=0;f<_;f++)if(n=p[f][0],o=p[f][1],a=[f?2*f-1:2*_-1,2*_],h=[2*f+1,2*_],s=!this._lightPasses(n,o),l=this._checkVisibility(a,h,s,c),l&&r(n,o,u,l),2==c.length&&0==c[0][0]&&c[1][0]==c[1][1])return},r.FOV.PreciseShadowcasting.prototype._checkVisibility=function(t,e,i,r){if(t[0]>e[0]){var n=this._checkVisibility(t,[t[1],t[1]],i,r),o=this._checkVisibility([0,1],e,i,r);return(n+o)/2}for(var s=0,a=!1;s<r.length;){var h=r[s],l=h[0]*t[1]-t[0]*h[1];if(l>=0){0!=l||s%2||(a=!0);break}s++}for(var c=r.length,u=!1;c--;){var h=r[c],l=e[0]*h[1]-h[0]*e[1];if(l>=0){0==l&&c%2&&(u=!0);break}}var p=!0;if(s==c&&(a||u)?p=!1:a&&u&&s+1==c&&c%2?p=!1:s>c&&s%2&&(p=!1),!p)return 0;var _,f,d=c-s+1;if(d%2)if(s%2){var f=r[s];_=(e[0]*f[1]-f[0]*e[1])/(f[1]*e[1]),i&&r.splice(s,d,e)}else{var f=r[c];_=(f[0]*t[1]-t[0]*f[1])/(t[1]*f[1]),i&&r.splice(s,d,t)}else{if(!(s%2))return i&&r.splice(s,d,t,e),1;var g=r[s],m=r[c];_=(m[0]*g[1]-g[0]*m[1])/(g[1]*m[1]),i&&r.splice(s,d)}var v=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]);return _/v},r.FOV.RecursiveShadowcasting=function(t,e){r.FOV.call(this,t,e)},r.FOV.RecursiveShadowcasting.extend(r.FOV),r.FOV.RecursiveShadowcasting.OCTANTS=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]],r.FOV.RecursiveShadowcasting.prototype.compute=function(t,e,i,n){n(t,e,0,1);for(var o=0;o<r.FOV.RecursiveShadowcasting.OCTANTS.length;o++)this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[o],i,n)},r.FOV.RecursiveShadowcasting.prototype.compute180=function(t,e,i,n,o){o(t,e,0,1);var s=(n-1+8)%8,a=(n-2+8)%8,h=(n+1+8)%8;this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[a],i,o),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[s],i,o),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[n],i,o),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[h],i,o)},r.FOV.RecursiveShadowcasting.prototype.compute90=function(t,e,i,n,o){o(t,e,0,1);var s=(n-1+8)%8;this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[n],i,o),this._renderOctant(t,e,r.FOV.RecursiveShadowcasting.OCTANTS[s],i,o)},r.FOV.RecursiveShadowcasting.prototype._renderOctant=function(t,e,i,r,n){this._castVisibility(t,e,1,1,0,r+1,i[0],i[1],i[2],i[3],n)},r.FOV.RecursiveShadowcasting.prototype._castVisibility=function(t,e,i,r,n,o,s,a,h,l,c){if(!(r<n))for(var u=i;u<=o;u++){for(var p=-u-1,_=-u,f=!1,d=0;p<=0;){p+=1;var g=t+p*s+_*a,m=e+p*h+_*l,v=(p-.5)/(_+.5),y=(p+.5)/(_-.5);if(!(y>r)){if(v<n)break;if(p*p+_*_<o*o&&c(g,m,u,1),f){if(!this._lightPasses(g,m)){d=y;continue}f=!1,r=d}else!this._lightPasses(g,m)&&u<o&&(f=!0,this._castVisibility(t,e,u+1,r,v,o,s,a,h,l,c),d=y)}}if(f)break}},r.Color={fromString:function(t){var e,i;if(t in this._cache)e=this._cache[t];else{if("#"==t.charAt(0)){var r=t.match(/[0-9a-f]/gi).map(function(t){return parseInt(t,16)});if(3==r.length)e=r.map(function(t){return 17*t});else{for(var n=0;n<3;n++)r[n+1]+=16*r[n],r.splice(n,1);e=r}}else e=(i=t.match(/rgb\(([0-9, ]+)\)/i))?i[1].split(/\s*,\s*/).map(function(t){return parseInt(t)}):[0,0,0];this._cache[t]=e}return e.slice()},add:function(t,e){for(var i=t.slice(),r=0;r<3;r++)for(var n=1;n<arguments.length;n++)i[r]+=arguments[n][r];return i},add_:function(t,e){for(var i=0;i<3;i++)for(var r=1;r<arguments.length;r++)t[i]+=arguments[r][i];return t},multiply:function(t,e){for(var i=t.slice(),r=0;r<3;r++){for(var n=1;n<arguments.length;n++)i[r]*=arguments[n][r]/255;i[r]=Math.round(i[r])}return i},multiply_:function(t,e){for(var i=0;i<3;i++){for(var r=1;r<arguments.length;r++)t[i]*=arguments[r][i]/255;t[i]=Math.round(t[i])}return t},interpolate:function(t,e,i){arguments.length<3&&(i=.5);for(var r=t.slice(),n=0;n<3;n++)r[n]=Math.round(r[n]+i*(e[n]-t[n]));return r},interpolateHSL:function(t,e,i){arguments.length<3&&(i=.5);for(var r=this.rgb2hsl(t),n=this.rgb2hsl(e),o=0;o<3;o++)r[o]+=i*(n[o]-r[o]);return this.hsl2rgb(r)},randomize:function(t,e){e instanceof Array||(e=Math.round(r.RNG.getNormal(0,e)));for(var i=t.slice(),n=0;n<3;n++)i[n]+=e instanceof Array?Math.round(r.RNG.getNormal(0,e[n])):e;return i},rgb2hsl:function(t){var e,i,r=t[0]/255,n=t[1]/255,o=t[2]/255,s=Math.max(r,n,o),a=Math.min(r,n,o),h=(s+a)/2;if(s==a)e=i=0;else{var l=s-a;switch(i=h>.5?l/(2-s-a):l/(s+a),s){case r:e=(n-o)/l+(n<o?6:0);break;case n:e=(o-r)/l+2;break;case o:e=(r-n)/l+4}e/=6}return[e,i,h]},hsl2rgb:function(t){var e=t[2];if(0==t[1])return e=Math.round(255*e),[e,e,e];var i=function(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t},r=t[1],n=e<.5?e*(1+r):e+r-e*r,o=2*e-n,s=i(o,n,t[0]+1/3),a=i(o,n,t[0]),h=i(o,n,t[0]-1/3);return[Math.round(255*s),Math.round(255*a),Math.round(255*h)]},toRGB:function(t){return"rgb("+this._clamp(t[0])+","+this._clamp(t[1])+","+this._clamp(t[2])+")"},toHex:function(t){for(var e=[],i=0;i<3;i++)e.push(this._clamp(t[i]).toString(16).lpad("0",2));return"#"+e.join("")},_clamp:function(t){return t<0?0:t>255?255:t},_cache:{black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},r.Lighting=function(t,e){this._reflectivityCallback=t,this._options={passes:1,emissionThreshold:100,range:10},this._fov=null,this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)},r.Lighting.prototype.setOptions=function(t){for(var e in t)this._options[e]=t[e];return t&&t.range&&this.reset(),this},r.Lighting.prototype.setFOV=function(t){return this._fov=t,this._fovCache={},this},r.Lighting.prototype.setLight=function(t,e,i){var n=t+","+e;return i?this._lights[n]="string"==typeof i?r.Color.fromString(i):i:delete this._lights[n],this},r.Lighting.prototype.clearLights=function(){this._lights={}},r.Lighting.prototype.reset=function(){return this._reflectivityCache={},this._fovCache={},this},r.Lighting.prototype.compute=function(t){var e={},i={},n={};for(var o in this._lights){var s=this._lights[o];i[o]=[0,0,0],r.Color.add_(i[o],s)}for(var a=0;a<this._options.passes;a++)this._emitLight(i,n,e),a+1!=this._options.passes&&(i=this._computeEmitters(n,e));for(var h in n){var l=h.split(","),c=parseInt(l[0]),u=parseInt(l[1]);t(c,u,n[h])}return this},r.Lighting.prototype._emitLight=function(t,e,i){for(var r in t){var n=r.split(","),o=parseInt(n[0]),s=parseInt(n[1]);this._emitLightFromCell(o,s,t[r],e),i[r]=1}return this},r.Lighting.prototype._computeEmitters=function(t,e){var i={};for(var r in t)if(!(r in e)){var n=t[r];if(r in this._reflectivityCache)var o=this._reflectivityCache[r];else{var s=r.split(","),a=parseInt(s[0]),h=parseInt(s[1]),o=this._reflectivityCallback(a,h);this._reflectivityCache[r]=o}if(0!=o){for(var l=[],c=0,u=0;u<3;u++){var p=Math.round(n[u]*o);l[u]=p,c+=p}c>this._options.emissionThreshold&&(i[r]=l)}}return i},r.Lighting.prototype._emitLightFromCell=function(t,e,i,r){var n=t+","+e;if(n in this._fovCache)var o=this._fovCache[n];else var o=this._updateFOV(t,e);for(var s in o){var a=o[s];if(s in r)var h=r[s];else{
var h=[0,0,0];r[s]=h}for(var l=0;l<3;l++)h[l]+=Math.round(i[l]*a)}return this},r.Lighting.prototype._updateFOV=function(t,e){var i=t+","+e,r={};this._fovCache[i]=r;var n=this._options.range,o=function(t,e,i,o){var s=t+","+e,a=o*(1-i/n);0!=a&&(r[s]=a)};return this._fov.compute(t,e,n,o.bind(this)),r},r.Path=function(t,e,i,n){this._toX=t,this._toY=e,this._fromX=null,this._fromY=null,this._passableCallback=i,this._options={topology:8};for(var o in n)this._options[o]=n[o];this._dirs=r.DIRS[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])},r.Path.prototype.compute=function(t,e,i){},r.Path.prototype._getNeighbors=function(t,e){for(var i=[],r=0;r<this._dirs.length;r++){var n=this._dirs[r],o=t+n[0],s=e+n[1];this._passableCallback(o,s)&&i.push([o,s])}return i},r.Path.Dijkstra=function(t,e,i,n){r.Path.call(this,t,e,i,n),this._computed={},this._todo=[],this._add(t,e,null)},r.Path.Dijkstra.extend(r.Path),r.Path.Dijkstra.prototype.compute=function(t,e,i){var r=t+","+e;if(r in this._computed||this._compute(t,e),r in this._computed)for(var n=this._computed[r];n;)i(n.x,n.y),n=n.prev},r.Path.Dijkstra.prototype._compute=function(t,e){for(;this._todo.length;){var i=this._todo.shift();if(i.x==t&&i.y==e)return;for(var r=this._getNeighbors(i.x,i.y),n=0;n<r.length;n++){var o=r[n],s=o[0],a=o[1],h=s+","+a;h in this._computed||this._add(s,a,i)}}},r.Path.Dijkstra.prototype._add=function(t,e,i){var r={x:t,y:e,prev:i};this._computed[t+","+e]=r,this._todo.push(r)},r.Path.AStar=function(t,e,i,n){r.Path.call(this,t,e,i,n),this._todo=[],this._done={},this._fromX=null,this._fromY=null},r.Path.AStar.extend(r.Path),r.Path.AStar.prototype.compute=function(t,e,i){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){var r=this._todo.shift();if(r.x==t&&r.y==e)break;for(var n=this._getNeighbors(r.x,r.y),o=0;o<n.length;o++){var s=n[o],a=s[0],h=s[1],l=a+","+h;l in this._done||this._add(a,h,r)}}var r=this._done[t+","+e];if(r)for(;r;)i(r.x,r.y),r=r.prev},r.Path.AStar.prototype._add=function(t,e,i){var r={x:t,y:e,prev:i,g:i?i.g+1:0,h:this._distance(t,e)};this._done[t+","+e]=r;for(var n=r.g+r.h,o=0;o<this._todo.length;o++){var s=this._todo[o];if(n<s.g+s.h)return void this._todo.splice(o,0,r)}this._todo.push(r)},r.Path.AStar.prototype._distance=function(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:var i=Math.abs(t-this._fromX),r=Math.abs(e-this._fromY);return r+Math.max(0,(i-r)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}throw new Error("Illegal topology")},r.Display.Term=function(t){r.Display.Backend.call(this,t),this._cx=-1,this._cy=-1,this._lastColor="",this._options={},this._ox=0,this._oy=0,this._termcolor={}},r.Display.Term.extend(r.Display.Backend),r.Display.Term.prototype.compute=function(e){this._options=e,this._ox=Math.floor((t.stdout.columns-e.width)/2),this._oy=Math.floor((t.stdout.rows-e.height)/2),this._termcolor=new(r.Display.Term[e.termColor.capitalize()])(this._context),this._context._termcolor=this._termcolor},r.Display.Term.prototype.draw=function(e,i){var r=e[0],n=e[1],o=e[2],s=e[3],a=e[4],h=this._ox+r,l=this._oy+n;if(!(h<0||h>=t.stdout.columns)&&!(l<0||l>=t.stdout.rows)&&(h===this._cx&&l===this._cy||(t.stdout.write(this._termcolor.positionToAnsi(h,l)),this._cx=h,this._cy=l),i&&(o||(o=" ")),o)){var c=this._termcolor.colorToAnsi(s,a);c!==this._lastColor&&(t.stdout.write(c),this._lastColor=c);var u=[].concat(o);t.stdout.write(u[0]),this._cx++,this._cx>=t.stdout.columns&&(this._cx=0,this._cy++)}},r.Display.Term.prototype.computeSize=function(e,i){return[t.stdout.columns,t.stdout.rows]},r.Display.Term.prototype.computeFontSize=function(t,e){return 12},r.Display.Term.prototype.eventToPosition=function(t,e){return[t,e]},r.Display.Term.Color=function(t){this._context=t},r.Display.Term.Color.prototype.clearToAnsi=function(t){},r.Display.Term.Color.prototype.colorToAnsi=function(t,e){},r.Display.Term.Color.prototype.positionToAnsi=function(t,e){},r.Display.Term.Xterm=function(t){r.Display.Term.Color.call(this,t)},r.Display.Term.Xterm.extend(r.Display.Term.Color),r.Display.Term.Xterm.prototype.clearToAnsi=function(t){return"[0;48;5;"+this._termcolor(t)+"m[2J"},r.Display.Term.Xterm.prototype.colorToAnsi=function(t,e){return"[0;38;5;"+this._termcolor(t)+";48;5;"+this._termcolor(e)+"m"},r.Display.Term.Xterm.prototype.positionToAnsi=function(t,e){return"["+(e+1)+";"+(t+1)+"H"},r.Display.Term.Xterm.prototype._termcolor=function(t){var e=256,i=6,n=i/e,o=r.Color.fromString(t),s=Math.floor(o[0]*n),a=Math.floor(o[1]*n),h=Math.floor(o[2]*n);return 36*s+6*a+1*h+16};for(var n in r)i[n]=r[n]}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:1}],3:[function(t,e,i){!function(t){function e(){var t=arguments[0],i=e.cache;return i[t]&&i.hasOwnProperty(t)||(i[t]=e.parse(t)),e.format.call(null,i[t],arguments)}function r(t){return Object.prototype.toString.call(t).slice(8,-1).toLowerCase()}function n(t,e){return Array(e+1).join(t)}var o={not_string:/[^s]/,number:/[diefg]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[\+\-]/};e.format=function(t,i){var s,a,h,l,c,u,p,_=1,f=t.length,d="",g=[],m=!0,v="";for(a=0;a<f;a++)if(d=r(t[a]),"string"===d)g[g.length]=t[a];else if("array"===d){if(l=t[a],l[2])for(s=i[_],h=0;h<l[2].length;h++){if(!s.hasOwnProperty(l[2][h]))throw new Error(e("[sprintf] property '%s' does not exist",l[2][h]));s=s[l[2][h]]}else s=l[1]?i[l[1]]:i[_++];if("function"==r(s)&&(s=s()),o.not_string.test(l[8])&&o.not_json.test(l[8])&&"number"!=r(s)&&isNaN(s))throw new TypeError(e("[sprintf] expecting number but found %s",r(s)));switch(o.number.test(l[8])&&(m=s>=0),l[8]){case"b":s=s.toString(2);break;case"c":s=String.fromCharCode(s);break;case"d":case"i":s=parseInt(s,10);break;case"j":s=JSON.stringify(s,null,l[6]?parseInt(l[6]):0);break;case"e":s=l[7]?s.toExponential(l[7]):s.toExponential();break;case"f":s=l[7]?parseFloat(s).toFixed(l[7]):parseFloat(s);break;case"g":s=l[7]?parseFloat(s).toPrecision(l[7]):parseFloat(s);break;case"o":s=s.toString(8);break;case"s":s=(s=String(s))&&l[7]?s.substring(0,l[7]):s;break;case"u":s>>>=0;break;case"x":s=s.toString(16);break;case"X":s=s.toString(16).toUpperCase()}o.json.test(l[8])?g[g.length]=s:(!o.number.test(l[8])||m&&!l[3]?v="":(v=m?"+":"-",s=s.toString().replace(o.sign,"")),u=l[4]?"0"===l[4]?"0":l[4].charAt(1):" ",p=l[6]-(v+s).length,c=l[6]&&p>0?n(u,p):"",g[g.length]=l[5]?v+s+c:"0"===u?v+c+s:c+v+s)}return g.join("")},e.cache={},e.parse=function(t){for(var e=t,i=[],r=[],n=0;e;){if(null!==(i=o.text.exec(e)))r[r.length]=i[0];else if(null!==(i=o.modulo.exec(e)))r[r.length]="%";else{if(null===(i=o.placeholder.exec(e)))throw new SyntaxError("[sprintf] unexpected placeholder");if(i[2]){n|=1;var s=[],a=i[2],h=[];if(null===(h=o.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s[s.length]=h[1];""!==(a=a.substring(h[0].length));)if(null!==(h=o.key_access.exec(a)))s[s.length]=h[1];else{if(null===(h=o.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");s[s.length]=h[1]}i[2]=s}else n|=2;if(3===n)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r[r.length]=i}e=e.substring(i[0].length)}return r};var s=function(t,i,r){return r=(i||[]).slice(0),r.splice(0,0,t),e.apply(null,r)};"undefined"!=typeof i?(i.sprintf=e,i.vsprintf=s):(t.sprintf=e,t.vsprintf=s,"function"==typeof define&&define.amd&&define(function(){return{sprintf:e,vsprintf:s}}))}("undefined"==typeof window?this:window)},{}],4:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var n=t("./game"),o=r(n);!function(t,e){o["default"].switchScreen(o["default"].Screen.StartScreen);var i=o["default"].getDisplay();document.querySelector("#main-display").appendChild(i.getContainer())}(window,window.console)},{"./game":7}],5:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),l=t("./glyph"),c=r(l),u=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));i._name=t.name||"",i._x=t.x||0,i._y=t.y||0,i._map=null,i._attachedMixins={},i._attachedMixinGroups={};for(var r=t.mixins||[],s=0;s<r.length;s++)for(var a=r[s],h=Object.keys(a),l=0;l<h.length;l++){var c=h[l];"init"===c||"name"===c||"groupName"===c||i.hasOwnProperty(c)||(i[c]=a[c]),i._attachedMixins[a.name]=!0,a.groupName&&(i._attachedMixinGroups[a.groupName]=!0),a.init&&a.init.call(i,t)}return i}return s(e,t),h(e,[{key:"hasMixin",value:function(){function t(t){var e="object"===("undefined"==typeof t?"undefined":a(t))?t.name:t;return this._attachedMixinGroups[e]||this._attachedMixins[e]}return t}()},{key:"setName",value:function(){function t(t){this._name=t}return t}()},{key:"setX",value:function(){function t(t){this._x=t}return t}()},{key:"setY",value:function(){function t(t){this._y=t}return t}()},{key:"getName",value:function(){function t(){return this._name}return t}()},{key:"getX",value:function(){function t(){return this._x}return t}()},{key:"getY",value:function(){function t(){return this._y}return t}()},{key:"setMap",value:function(){function t(t){this._map=t}return t}()},{key:"getMap",value:function(){function t(){return this._map}return t}()}]),e}(c["default"]);i["default"]=u},{"./glyph":6}],6:[function(t,e,i){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),o=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,t),this._char=e["char"]||" ",this._fg=e.fg||"white",this._bg=e.bg||"black"}return n(t,[{key:"getChar",value:function(){function t(){return this._char}return t}()},{key:"getBackground",value:function(){function t(){return this._bg}return t}()},{key:"getForeground",value:function(){function t(){return this._fg}return t}()}]),t}();i["default"]=o},{}],7:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0}),i.Game=void 0;var n=t("rot-js"),o=r(n),s=t("sprintf-js"),a=t("./screen"),h=r(a),l=t("./mixins"),c={width:80,height:24,fontSize:15,forceSquareRatio:!0},u=i.Game={Screen:h["default"],_display:null,_currentScreen:null,_screenWidth:c.width,_screenHeight:c.height,init:function(){function t(t){this._display=new o["default"].Display(Object.assign({},c,t));var e=this,i=function(){function t(t){window.addEventListener(t,function(i){null!==e._currentScreen&&e._currentScreen.handleInput(t,i)})}return t}();return["keydown","keyup","keypress"].forEach(i),this}return t}(),refresh:function(){function t(){this._display.clear(),this._currentScreen.render(this._display)}return t}(),getDisplay:function(){function t(){return this._display}return t}(),getScreenWidth:function(){function t(){return this._screenWidth}return t}(),getScreenHeight:function(){function t(){return this._screenHeight}return t}(),switchScreen:function(){function t(t){console.log("switchScreen",t),null!==this._currentScreen&&this._currentScreen.exit(),this.getDisplay().clear(),this._currentScreen=t,null!==!this._currentScreen&&(this._currentScreen.enter(),this.refresh())}return t}(),sendMessage:function(){function t(t,e,i){var r=void 0;t.hasMixin(l.MessageRecipient)&&(r=i?(0,s.vsprintf)(e,i):e,t.receiveMessage(r))}return t}(),sendMessageNearby:function(){function t(t,e,i,r,n){var o=r;n&&(o=(0,s.vsprintf)(r,n));var a=t.getEntitiesWithinRadius(e,i,5);a.forEach(function(t){t.hasMixin(l.MessageRecipient)&&t.receiveMessage(o)})}return t}()};i["default"]=u.init()},{"./mixins":9,"./screen":10,"rot-js":2,"sprintf-js":3}],8:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),s=t("rot-js"),a=r(s),h=t("./templates"),l=t("./entity"),c=r(l),u=t("./tile"),p=function(){function t(e,i){n(this,t),this._tiles=e,this._width=e.length,this._height=e[0].length,this._entities=[],this._scheduler=new a["default"].Scheduler.Simple,this._engine=new a["default"].Engine(this._scheduler),this.addEntityAtRandomPosition(i);for(var r=0;r<50;r++)this.addEntityAtRandomPosition(new c["default"](h.FungusTemplate))}return o(t,[{key:"getWidth",value:function(){function t(){return this._width}return t}()},{key:"getHeight",value:function(){function t(){return this._height}return t}()},{key:"getTile",value:function(){function t(t,e){var i=u.NullTile;return t<0||t>=this._width||e<0||e>=this.height||(i=this._tiles[t][e]||i),i}return t}()},{key:"dig",value:function(){function t(t,e){this.getTile(t,e).isDiggable()&&(this._tiles[t][e]=u.FloorTile)}return t}()},{key:"getRandomFloorPosition",value:function(){function t(){var t=void 0,e=void 0;do t=Math.floor(Math.random()*this._width),e=Math.floor(Math.random()*this._height);while(!this.isEmptyFloor(t,e));return{x:t,y:e}}return t}()},{key:"getEngine",value:function(){function t(){return this._engine}return t}()},{key:"getEntities",value:function(){function t(){return this._entities}return t}()},{key:"getEntityAt",value:function(){function t(t,e){for(var i=0;i<this._entities.length;i++){var r=this._entities[i];if(r.getX()==t&&r.getY()==e)return r}return null}return t}()},{key:"getEntitiesWithinRadius",value:function(){function t(t,e,i){for(var r=[],n=t-i,o=t+i,s=e-i,a=e+i,h=0;h<this._entities.length;h++){var l=this._entities[h];l.getX()>=n&&l.getX()<=o&&l.getY()>=s&&l.getY()<=a&&r.push(l)}return r}return t}()},{key:"addEntity",value:function(){function t(t){if(t.getX()<0||t.getX()>=this._width||t.getY()<0||t.getY()>=this._height)throw new Error("Adding entity out of bounds.");t.setMap(this),this._entities.push(t),t.hasMixin("Actor")&&this._scheduler.add(t,!0)}return t}()},{key:"addEntityAtRandomPosition",value:function(){function t(t){var e=this.getRandomFloorPosition();t.setX(e.x),t.setY(e.y),this.addEntity(t)}return t}()},{key:"removeEntity",value:function(){function t(t){for(var e=0;e<this._entities.length;e++)if(this._entities[e]==t){this._entities.splice(e,1);break}t.hasMixin("Actor")&&this._scheduler.remove(t)}return t}()},{key:"isEmptyFloor",value:function(){function t(t,e){return this.getTile(t,e)==u.FloorTile&&!this.getEntityAt(t,e)}return t}()}]),t}();i["default"]=p},{"./entity":5,"./templates":11,"./tile":12,"rot-js":2}],9:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0}),i.MessageRecipient=i.Attacker=i.Digger=i.Destructible=i.FungusActor=i.PlayerActor=i.Moveable=void 0;var n=t("./entity"),o=r(n),s=t("./templates"),a=t("./index"),h=r(a);i.Moveable={name:"Moveable",tryMove:function(){function t(t,e,i){var r=i.getTile(t,e),n=i.getEntityAt(t,e);if(n){if(this.hasMixin("Attacker"))return this.attack(n),!0}else{if(r.isWalkable())return this._x=t,this._y=e,!0;if(r.isDiggable()&&this.hasMixin("Digger"))return this.dig(t,e,i),!0}return!1}return t}()},i.PlayerActor={name:"PlayerActor",groupName:"Actor",act:function(){function t(){h["default"].refresh(),this.getMap().getEngine().lock(),this.clearMessages()}return t}()},i.FungusActor={name:"FungusActor",groupName:"Actor",init:function(){function t(){this._growthsRemaining=5}return t}(),act:function(){function t(){if(this._growthsRemaining>0&&Math.random()<=.02){var t=Math.floor(3*Math.random())-1,e=Math.floor(3*Math.random())-1;if((0!==t||0!==e)&&this.getMap().isEmptyFloor(this.getX()+t,this.getY()+e)){var i=new o["default"](s.FungusTemplate);i.setX(this.getX()+t),i.setY(this.getY()+e),this.getMap().addEntity(i),this._growthsRemaining--,h["default"].sendMessageNearby(this.getMap(),i.getX(),i.getY(),"The fungus is spreading!")}}}return t}()},i.Destructible={name:"Destructible",init:function(){function t(t){this._maxHP=t.maxHP||10,this._HP=t.HP||this._maxHP,this._defenseValue=t.defenseValue||0}return t}(),getHP:function(){function t(){return this._HP}return t}(),getMaxHP:function(){function t(){return this._maxHP}return t}(),getDefenseValue:function(){function t(){return this._defenseValue}return t}(),takeDamage:function(){function t(t,e){this._HP-=e,this._HP<=0&&(h["default"].sendMessage(t,"You kill the %s!",[this.getName()]),h["default"].sendMessage(this,"You die!"),this.getMap().removeEntity(this))}return t}()},i.Digger={name:"SimpleDigger",groupName:"Digger",dig:function(){function t(t,e,i){i.dig(t,e)}return t}()},i.Attacker={name:"Attacker",groupName:"Attacker",init:function(){function t(t){this._attackValue=t.attackValue||1}return t}(),getAttackValue:function(){function t(){return this._attackValue}return t}(),attack:function(){function t(t){if(t.hasMixin("Destructible")){var e=this.getAttackValue(),i=t.getDefenseValue(),r=Math.max(0,e-i),n=1+Math.floor(Math.random()*r);h["default"].sendMessage(this,"You strike the %s for %d damage!",[t.getName(),n]),h["default"].sendMessage(t,"The %s strikes you for %d damage!",[this.getName(),n]),t.takeDamage(this,n)}}return t}()},i.MessageRecipient={name:"MessageRecipient",init:function(){function t(t){this._messages=[]}return t}(),receiveMessage:function(){function t(t){this._messages.push(t)}return t}(),getMessages:function(){function t(){return this._messages}return t}(),clearMessages:function(){function t(){this._messages=[]}return t}()}},{"./entity":5,"./index":7,"./templates":11}],10:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var n=t("rot-js"),o=r(n),s=t("./tile"),a=t("./map"),h=r(a),l=t("./entity"),c=r(l),u=t("./templates"),p=t("./index"),_=r(p),f={enter:function(){function t(){return console.log("Entered StartScreen")}return t}(),exit:function(){function t(){return console.log("Exited StartScreen")}return t}(),render:function(){function t(t){t.drawText(1,1,"%c{yellow}Javascript Roguelike"),t.drawText(1,2,"Press [Enter] to start!")}return t}(),handleInput:function(){function t(t,e){"keydown"===t&&e.keyCode===o["default"].VK_RETURN&&_["default"].switchScreen(d)}return t}()},d={_map:null,_player:null,enter:function(){function t(){for(var t=100,e=48,i=new o["default"].Map.Cellular(t,e),r=3,n=[],a=0;a<t;a++){n.push([]);for(var l=0;l<e;l++)n[a].push(s.NullTile)}i.randomize(.5);for(var p=0;p<r-1;p++)i.create();i.create(function(t,e,i){1===i?n[t][e]=s.FloorTile:n[t][e]=s.WallTile}),this._player=new c["default"](u.PlayerTemplate),this._map=new h["default"](n,this._player),this._map.getEngine().start()}return t}(),move:function(){function t(t,e){var i=this._player.getX()+t,r=this._player.getY()+e;this._player.tryMove(i,r,this._map)}return t}(),render:function(){function t(t){for(var e=_["default"].getScreenWidth(),i=_["default"].getScreenHeight(),r=Math.min(Math.max(0,this._player.getX()-e/2),this._map.getWidth()-e),n=Math.min(Math.max(0,this._player.getY()-i/2),this._map.getHeight()-i),o=r;o<r+e;o++)for(var s=n;s<n+i;s++){var a=this._map.getTile(o,s);t.draw(o-r,s-n,a.getChar(),a.getForeground(),a.getBackground())}var h=this._map.getEntities();h.forEach(function(o){o.getX()>=r&&o.getY()>=n&&o.getX()<r+e&&o.getY()<n+i&&t.draw(o.getX()-r,o.getY()-n,o.getChar(),o.getForeground(),o.getBackground())});var l=this._player.getMessages(),c=0;l.forEach(function(e){c+=t.drawText(0,c,"%c{white}%b{black}"+String(e))})}return t}(),handleInput:function(){function t(t,e){"keydown"===t&&(e.keyCode===o["default"].VK_RETURN?_["default"].switchScreen(g):e.keyCode===o["default"].VK_ESCAPE?_["default"].switchScreen(m):(e.keyCode===o["default"].VK_LEFT?this.move(-1,0):e.keyCode===o["default"].VK_RIGHT?this.move(1,0):e.keyCode===o["default"].VK_UP?this.move(0,-1):e.keyCode===o["default"].VK_DOWN&&this.move(0,1),this._map.getEngine().unlock()))}return t}(),exit:function(){function t(){console.log("Exited PlayScreen")}return t}()},g={enter:function(){function t(){return console.log("Entered WinScreen")}return t}(),exit:function(){function t(){return console.log("Exited WinScreen")}return t}(),render:function(){function t(t){for(var e=0;e<22;e++){var i=Math.round(255*Math.random()),r=Math.round(255*Math.random()),n=Math.round(255*Math.random()),s=o["default"].Color.toRGB([i,r,n]);t.drawText(2,e+1,"%b{"+String(s)+"}You win!")}}return t}(),handleInput:function(){function t(t,e){}return t}()},m={enter:function(){function t(){return console.log("Entered LoseScreen")}return t}(),exit:function(){function t(){return console.log("Exited LoseScreen")}return t}(),render:function(){function t(t){for(var e=0;e<22;e++)t.drawText(2,e+1,"%b{red}You lose! :(")}return t}(),handleInput:function(){function t(t,e){}return t}()};i["default"]={StartScreen:f,PlayScreen:d,WinScreen:g,LoseScreen:m}},{"./entity":5,"./index":7,"./map":8,"./templates":11,"./tile":12,"rot-js":2}],11:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.FungusTemplate=i.PlayerTemplate=void 0;var r=t("./mixins");i.PlayerTemplate={"char":"@",fg:"white",maxHP:40,attackValue:10,mixins:[r.Moveable,r.PlayerActor,r.Attacker,r.Digger,r.Destructible,r.MessageRecipient]},i.FungusTemplate={name:"fungus","char":"F",fg:"green",maxHP:10,mixins:[r.FungusActor,r.Destructible]}},{"./mixins":9}],12:[function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0}),i.WallTile=i.FloorTile=i.NullTile=void 0;var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=t("./glyph"),l=r(h),c=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i._isWalkable=t.isWalkable||!1,i._isDiggable=t.isDiggable||!1,i}return s(e,t),a(e,[{key:"isWalkable",value:function(){function t(){return this._isWalkable}return t}()},{key:"isDiggable",value:function(){function t(){return this._isDiggable}return t}()}]),e}(l["default"]);i["default"]=c;i.NullTile=new c({}),i.FloorTile=new c({"char":".",isWalkable:!0}),i.WallTile=new c({"char":"#",fg:"goldenrod",isDiggable:!0})},{"./glyph":6}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
